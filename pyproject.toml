[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "autopr-engine"
version = "1.0.0"
description = "AI-Powered GitHub PR Automation and Issue Management"
authors = ["VeritasVault Team <dev@veritasvault.net>"]
maintainers = ["VeritasVault Team <dev@veritasvault.net>"]
license = "MIT"
readme = "README.md"
packages = [{include = "autopr"}]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

[tool.poetry.dependencies]
python = "^3.13.0"
pydantic = "^2.9.0"
pydantic-settings = "^2.0.0"
aiohttp = "^3.10.0"
structlog = "^24.4.0"
click = "^8.1.0"
pyyaml = "^6.0.1"
jinja2 = "^3.1.4"
pygithub = "^2.4.0"
GitPython = "^3.1.43"
openai = "^1.51.0"
anthropic = "^0.34.0"
mistralai = "^1.2.0"
groq = "^0.11.0"
httpx = "^0.27.0"
websockets = "^13.1.0"
python-dateutil = "^2.8.0"
pytz = "^2024.1"
python-dotenv = "^1.0.1"
tomli = "^2.0.1"
loguru = "^0.7.2"

[tool.poetry.extras]
full = [
    "dev",
    "monitoring",
    "memory",
    "ai",
    "database",
    "server",
    "resilience"
]

keywords = [
    "github", "pull-request", "automation", "ai", "code-review",
    "ci-cd", "workflow", "integration", "slack", "linear", "autogen",
    "llm", "openai", "anthropic", "issue-management", "quality-gates",
    "platform-detection", "multi-agent"
]

[tool.poetry.urls]
Homepage = "https://github.com/veritasvault/autopr-engine"
Documentation = "https://autopr-engine.readthedocs.io"
Repository = "https://github.com/veritasvault/autopr-engine"
"Bug Tracker" = "https://github.com/veritasvault/autopr-engine/issues"
Changelog = "https://github.com/veritasvault/autopr-engine/blob/main/CHANGELOG.md"
Discussions = "https://github.com/veritasvault/autopr-engine/discussions"

[tool.poetry.scripts]
autopr = "autopr.cli:main"
autopr-server = "autopr.server:main"
autopr-worker = "autopr.worker:main"
autopr-migration = "autopr.migration:main"

[tool.poetry.plugins."autopr.actions"]
"platform_detector" = "autopr.actions.platform_detector:PlatformDetector"
"pr_review_analyzer" = "autopr.actions.pr_review_analyzer:PRReviewAnalyzer"
"issue_creator" = "autopr.actions.issue_creator:IssueCreator"
"ai_comment_analyzer" = "autopr.actions.ai_comment_analyzer:AICommentAnalyzer"
"quality_gates" = "autopr.actions.quality_gates:QualityGates"
"autogen_multi_agent" = "autopr.actions.autogen_multi_agent:AutoGenMultiAgent"

[tool.poetry.plugins."autopr.integrations"]
"github" = "autopr.integrations.github:GitHubIntegration"
"linear" = "autopr.integrations.linear:LinearIntegration"
"slack" = "autopr.integrations.slack:SlackIntegration"
"axolo" = "autopr.integrations.axolo:AxoloIntegration"

[tool.poetry.plugins."autopr.llm_providers"]
"openai" = "autopr.ai.providers.openai:OpenAIProvider"
"anthropic" = "autopr.ai.providers.anthropic:AnthropicProvider"
"mistral" = "autopr.ai.providers.mistral:MistralProvider"
"groq" = "autopr.ai.providers.groq:GroqProvider"


httpx = "^0.27.0"
websockets = "^13.1.0"
python-dateutil = "^2.8.0"
pytz = "^2024.1"
python-dotenv = "^1.0.1"
tomli = "^2.0.1"
loguru = "^0.7.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
black = "^24.8.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
mypy = "^1.11.0"
pre-commit = "^3.0.0"
sphinx = "^8.1.0"
sphinx-rtd-theme = "^3.0.0"
myst-parser = "^4.0.0"

[tool.poetry.group.monitoring.dependencies]
prometheus-client = "^0.17.0"
sentry-sdk = {extras = ["fastapi"], version = "^1.32.0"}
datadog = "^0.47.0"

[tool.poetry.group.memory.dependencies]
mem0ai = "^0.1.0"
chromadb = "^0.4.0"
qdrant-client = "^1.5.0"

[tool.poetry.group.ai.dependencies]
langchain = "^0.0.300"
langchain-openai = "^0.0.5"
langchain-anthropic = "^0.1.0"

[tool.poetry.group.database.dependencies]
asyncpg = "^0.28.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.0"}
alembic = "^1.12.0"
redis = "^4.6.0"
aioredis = "^2.0.0"

[tool.poetry.group.server.dependencies]
fastapi = "^0.103.0"
uvicorn = {extras = ["standard"], version = "^0.23.0"}
gunicorn = "^21.2.0"

[tool.poetry.group.resilience.dependencies]
pybreaker = "^1.0.0"
tenacity = "^8.2.0"
limits = "^3.6.0"




[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
autopr = [
    "workflows/*.yaml",
    "workflows/*.yml",
    "config/*.yaml",
    "config/*.yml",
    "templates/*.j2",
    "templates/*.jinja",
    "static/*"
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--tb=short", "--maxfail=10"]
testpaths = ["tests"]
# Warning filters are now controlled by volume settings in autopr/utils/volume_utils.py
# Default to 'ignore' but will be overridden by volume settings when tests run
filterwarnings = [
    # Always show deprecation warnings
    "error::DeprecationWarning",
    # Always show resource warnings (e.g., unclosed files)
    "error::ResourceWarning",
    # Default to ignoring other warnings - volume settings will adjust this
    "ignore"
]

# Volume-based warning control
# These settings map volume levels to warning filters
[tool.pytest.volume_warnings]
# Silent (0): Only critical issues
"0" = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::BytesWarning",
    "ignore::ResourceWarning"
]
# Quiet (1-199): Show important warnings
"100" = [
    "default::DeprecationWarning",
    "default::ResourceWarning",
    "ignore::UserWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::BytesWarning"
]
# Moderate (200-399): Show most warnings
"300" = [
    "default::Warning"  # Show all warnings by default
]
# Balanced (400-599): Show all warnings and fail on critical ones
"500" = [
    "error::DeprecationWarning",
    "error::ResourceWarning",
    "default::Warning"
]
# Thorough (600-799): Fail on most warnings
"700" = [
    "error::Warning"  # Fail on all warnings
]
# Maximum (800-1000): Strictest settings
"1000" = [
    "error::Warning",
    "error::_pytest.warning_types.PytestWarning"
]

[tool.coverage.run]
source = ["autopr"]
omit = ["*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
per-file-ignores = ["__init__.py:F401"]

[tool.ruff]
line-length = 100
target-version = "py312"
fixable = ["ALL"]
unfixable = []
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint]
extend-select = ["ALL"]
extend-ignore = [
    "ANN", "D", "E203", "E501", "COM812", "ISC001",
    "B008", "C901", "BLE001", "S311"
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.isort]
force-sort-within-sections = true
section-order = [
    "future", "standard-library", "third-party", "first-party", "local-folder"
]

[tool.bandit]
skips = ["B101", "B601"]
exclude_dirs = ["tests", "docs", "migrations"]

[tool.pydocstyle]
inherit = false
match = "(?!test_).*\\.py"
match_dir = "[^\\.].*"
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D107",
    "D200", "D203", "D212", "D213", "D400", "D401", "D415"
]

[tool.sphinx]
project = "AutoPR Engine"
copyright = "2025, VeritasVault Team"
author = "VeritasVault Team"
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.autosummary"
]
templates_path = ["_templates"]
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]
html_theme = "sphinx_rtd_theme"
html_static_path = ["_static"]

[tool.vulture]
min_confidence = 80
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]

[tool.interrogate]
fail-under = 80
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]
ignore-init-module = true
ignore-init-method = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-special = true

[tool.radon]
cc_min = "A"
mi_min = "A"
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]

[tool.xenon]
max-absolute-A = 10
max-absolute-B = 20
max-absolute-C = 30
max-absolute-D = 40
max-absolute-E = 50
max-absolute-F = 60
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]

[tool.semgrep]
configs = [
    "p/security-audit", "p/bandit", "p/owasp-top-ten", "p/secrets",
    "p/ci", "p/performance", "p/error-prone", "p/best-practices"
]
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]

[tool.setuptools.packages.find]
exclude = ["tests*", "docs*", "examples*"]