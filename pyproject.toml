[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "autopr-engine"
version = "1.0.0"
description = "AI-Powered GitHub PR Automation and Issue Management"
authors = ["VeritasVault Team <dev@veritasvault.net>"]
maintainers = ["VeritasVault Team <dev@veritasvault.net>"]
license = "MIT"
readme = "README.md"
packages = [{include = "autopr"}]

classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Scientific/Engineering :: Artificial Intelligence"
]

[tool.poetry.dependencies]
python = "^3.13.0"
pydantic = "^2.9.0"
pydantic-settings = "^2.0.0"
aiohttp = "^3.10.0"
structlog = "^24.4.0"
click = "^8.1.0"
pyyaml = "^6.0.1"
jinja2 = "^3.1.4"
pygithub = "^2.4.0"
GitPython = "^3.1.43"
openai = "^1.51.0"
anthropic = "^0.34.0"
mistralai = "^1.2.0"
groq = "^0.11.0"
httpx = "^0.27.0"
websockets = "^13.1.0"
python-dateutil = "^2.8.0"
pytz = "^2024.1"
python-dotenv = "^1.0.1"
tomli = "^2.0.1"
loguru = "^0.7.2"
dependency-injector = "^4.0.0"

[tool.poetry.extras]
full = [
    "dev",
    "monitoring",
    "memory",
    "ai",
    "database",
    "server",
    "resilience"
]

keywords = [
    "github", "pull-request", "automation", "ai", "code-review",
    "ci-cd", "workflow", "integration", "slack", "linear", "autogen",
    "llm", "openai", "anthropic", "issue-management", "quality-gates",
    "platform-detection", "multi-agent"
]

[tool.poetry.urls]
Homepage = "https://github.com/veritasvault/autopr-engine"
Documentation = "https://autopr-engine.readthedocs.io"
Repository = "https://github.com/veritasvault/autopr-engine"
"Bug Tracker" = "https://github.com/veritasvault/autopr-engine/issues"
Changelog = "https://github.com/veritasvault/autopr-engine/blob/main/CHANGELOG.md"
Discussions = "https://github.com/veritasvault/autopr-engine/discussions"

[tool.poetry.scripts]
autopr = "autopr.cli:main"
autopr-server = "autopr.server:main"
autopr-worker = "autopr.worker:main"
autopr-migration = "autopr.migration:main"

[tool.poetry.plugins."autopr.actions"]
"platform_detector" = "autopr.actions.platform_detector:PlatformDetector"
"pr_review_analyzer" = "autopr.actions.pr_review_analyzer:PRReviewAnalyzer"
"issue_creator" = "autopr.actions.issue_creator:IssueCreator"
"ai_comment_analyzer" = "autopr.actions.ai_comment_analyzer:AICommentAnalyzer"
"quality_gates" = "autopr.actions.quality_gates:QualityGates"
"autogen_multi_agent" = "autopr.actions.autogen_multi_agent:AutoGenMultiAgent"

[tool.poetry.plugins."autopr.integrations"]
"github" = "autopr.integrations.github:GitHubIntegration"
"linear" = "autopr.integrations.linear:LinearIntegration"
"slack" = "autopr.integrations.slack:SlackIntegration"
"axolo" = "autopr.integrations.axolo:AxoloIntegration"

[tool.poetry.plugins."autopr.llm_providers"]
"openai" = "autopr.ai.providers.openai:OpenAIProvider"
"anthropic" = "autopr.ai.providers.anthropic:AnthropicProvider"
"mistral" = "autopr.ai.providers.mistral:MistralProvider"
"groq" = "autopr.ai.providers.groq:GroqProvider"


httpx = "^0.27.0"
websockets = "^13.1.0"
python-dateutil = "^2.8.0"
pytz = "^2024.1"
python-dotenv = "^1.0.1"
tomli = "^2.0.1"
loguru = "^0.7.2"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
pytest-mock = "^3.14.0"
black = "^24.8.0"
isort = "^5.13.0"
flake8 = "^7.0.0"
mypy = "^1.11.0"
pre-commit = "^3.0.0"
sphinx = "^8.1.0"
sphinx-rtd-theme = "^3.0.0"
myst-parser = "^4.0.0"

[tool.poetry.group.monitoring.dependencies]
prometheus-client = "^0.17.0"
sentry-sdk = {extras = ["fastapi"], version = "^1.32.0"}
datadog = "^0.47.0"

[tool.poetry.group.memory.dependencies]
mem0ai = "^0.1.0"
chromadb = "^0.4.0"
qdrant-client = "^1.5.0"

[tool.poetry.group.ai.dependencies]
langchain = "^0.0.300"
langchain-openai = "^0.0.5"
langchain-anthropic = "^0.1.0"

[tool.poetry.group.database.dependencies]
asyncpg = "^0.28.0"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.0"}
alembic = "^1.12.0"
redis = "^4.6.0"
aioredis = "^2.0.0"

[tool.poetry.group.server.dependencies]
fastapi = "^0.103.0"
uvicorn = {extras = ["standard"], version = "^0.23.0"}
gunicorn = "^21.2.0"

[tool.poetry.group.resilience.dependencies]
pybreaker = "^1.0.0"
tenacity = "^8.2.0"
limits = "^3.6.0"




[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
autopr = [
    "workflows/*.yaml",
    "workflows/*.yml",
    "config/*.yaml",
    "config/*.yml",
    "templates/*.j2",
    "templates/*.jinja",
    "static/*"
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--tb=short", "--maxfail=10"]
testpaths = ["tests"]
# Warning filters are now controlled by volume settings in autopr/utils/volume_utils.py
# Default to 'ignore' but will be overridden by volume settings when tests run
filterwarnings = [
    # Always show deprecation warnings
    "error",
    # Default to ignoring other warnings - volume settings will adjust this
    "ignore"
]

# Volume-based warning control
# These settings map volume levels to warning filters
[tool.pytest.volume_warnings]
# Silent (0): Only critical issues
"0" = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::BytesWarning",
    "ignore::ResourceWarning"
]
# Quiet (1-199): Show important warnings
"100" = [
    "default::DeprecationWarning",
    "default::ResourceWarning",
    "ignore::UserWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::ImportWarning",
    "ignore::BytesWarning"
]
# Moderate (200-399): Show most warnings
"300" = [
    "default::Warning"  # Show all warnings by default
]
# Balanced (400-599): Show all warnings and fail on critical ones
"500" = [
    "error::DeprecationWarning",
    "error::ResourceWarning",
    "default::Warning"
]
# Thorough (600-799): Fail on most warnings
"700" = [
    "error::Warning"  # Fail on all warnings
]
# Maximum (800-1000): Strictest settings
"1000" = [
    "error::Warning",
    "error::_pytest.warning_types.PytestWarning"
]

[tool.coverage.run]
source = ["autopr"]
omit = ["*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
per-file-ignores = ["__init__.py:F401"]

[tool.ruff]
# Same as Black.
line-length = 100

# Assume Python 3.12 (latest supported by ruff)
target-version = "py312"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "htmlcov",
    "packages",
    "templates/example-hybrid/test_early_enhanced_file_generator",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), and isort (`I`) codes by default.
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "UP", # pyupgrade
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "T201", # print statements (only in scripts)
    "TID", # flake8-tidy-imports
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "G",   # flake8-logging-format
    "PT",  # flake8-pytest-style
    "SLF", # flake8-self
    "TRY", # tryceratops
    "ERA", # eradicate
    "FIX", # ruff
    "INP", # isort
    "PGH", # pygrep-hooks
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

[tool.ruff.lint.per-file-ignores]
# Allow print statements in scripts
"scripts/**/*.py" = ["T201"]

# Allow various issues in test files
"tests/**/*.py" = [
    "S101", "ERA001",  # assert statements and commented code
    "PLR0912", "PLR0913", "PLR0915",  # complexity issues
    "ARG001", "ARG002", "ARG004",  # unused arguments
    "SLF001",  # private member access
    "PLR2004",  # magic numbers
    "S110",  # try-except-pass
    "G004",  # f-strings in logging
    "DTZ005",  # datetime.now() without tz
]

# Allow specific issues in volume-control scripts
"scripts/volume-control/**/*.py" = [
    "T201",  # print statements
    "PTH110", "PTH123", "PTH103", "PTH107", "PTH118",  # pathlib issues
    "PLR0911", "PLR0912", "PLR2004",  # complexity issues
    "TRY003", "TRY300", "TRY301", "TRY302",  # try-except issues
    "EM101", "EM102",  # exception message issues
    "F811", "F821", "F841",  # pyflakes issues
    "ARG002",  # unused arguments
    "SIM102", "SIM105", "SIM117",  # simplify issues
    "S603", "S607", "S110", "S112",  # security issues
    "N814", "N999",  # naming issues
    "RUF012",  # mutable class attributes
    "FBT001", "FBT002",  # boolean issues
    "A002",  # argument shadowing
    "B904",  # exception chaining
    "G004",  # logging f-strings
    "PGH003",  # pygrep-hooks
]

# Allow specific issues in template discovery
"templates/discovery/**/*.py" = [
    "PTH123",  # pathlib issues
    "PLR0912", "PLR0913", "PLR0915", "PLR2004",  # complexity issues
    "S112", "S110",  # security issues
    "TRY300",  # try-except issues
    "DTZ005",  # datetime issues
    "ARG001", "ARG002", "ARG004",  # argument issues
    "FBT001", "FBT002",  # boolean issues
    "B019",  # lru_cache on methods
    "PLW0602", "PLW0603",  # global issues
    "G004",  # logging f-strings
    "TRY401",  # exception object in logging
    "PLW2901",  # loop variable overwritten
    "PGH003",  # pygrep-hooks
    "B904",  # exception chaining
]

# Allow specific issues in tools
"tools/**/*.py" = [
    "T201",  # print statements
    "PTH123", "PTH110", "PTH103", "PTH107",  # pathlib issues
    "PLR0912", "PLR0913", "PLR0915", "PLR2004",  # complexity issues
    "S603", "S607", "S110", "S112",  # security issues
    "TRY300", "TRY301", "TRY302",  # try-except issues
    "TD002", "TD003", "FIX002",  # TODO issues
    "E741",  # ambiguous variable names
    "FBT001", "FBT002",  # boolean issues
    "ARG002",  # unused arguments
    "N999",  # invalid module names
    "PGH003",  # pygrep-hooks
    "B007",  # unused loop variables
    "G004",  # logging f-strings
    "TRY401",  # exception object in logging
]

[tool.ruff.lint.isort]
# Force sort within sections
force-sort-within-sections = true

# Use deterministic sorting
force-wrap-aliases = true
force-single-line = false
lines-after-imports = 2

# Known first party modules
known-first-party = ["autopr"]

# Known third party modules
known-third-party = [
    "aiohttp",
    "anthropic",
    "click",
    "crewai",
    "git",
    "github",
    "httpx",
    "jinja2",
    "linear",
    "mistralai",
    "openai",
    "pydantic",
    "pytest",
    "pyyaml",
    "structlog",
    "websockets",
]

# Import section order (deterministic)
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]

[tool.ruff.lint.flake8-tidy-imports]
# Allow `from ... import ...` style imports.
ban-relative-imports = "all"







[tool.bandit]
# Expanded skips to align with project-safe usages and reduce false positives
skips = [
    "B101", "B601", "B603", "B607", "B110", "B112", "B404",
    "B105", "B311", "B324", "B608"
]
# Exclude dependency and build directories from scanning
exclude_dirs = [
    "tests", "docs", "migrations", ".venv", "venv", "env",
    "node_modules", "build", "dist", "site-packages"
]

[tool.pydocstyle]
inherit = false
match = "(?!test_).*\\.py"
match_dir = "[^\\.].*"
ignore = [
    "D100", "D101", "D102", "D103", "D104", "D105", "D107",
    "D200", "D203", "D212", "D213", "D400", "D401", "D415"
]

[tool.sphinx]
project = "AutoPR Engine"
copyright = "2025, VeritasVault Team"
author = "VeritasVault Team"
extensions = [
    "sphinx.ext.autodoc",
    "sphinx.ext.viewcode",
    "sphinx.ext.napoleon",
    "sphinx.ext.intersphinx",
    "sphinx.ext.autosummary"
]
templates_path = ["_templates"]
exclude_patterns = ["_build", "Thumbs.db", ".DS_Store"]
html_theme = "sphinx_rtd_theme"
html_static_path = ["_static"]

[tool.vulture]
min_confidence = 80
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]

[tool.interrogate]
fail-under = 80
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]
ignore-init-module = true
ignore-init-method = true
ignore-semiprivate = true
ignore-private = true
ignore-property-decorators = true
ignore-special = true

[tool.radon]
cc_min = "A"
mi_min = "A"
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]

[tool.xenon]
max-absolute-A = 10
max-absolute-B = 20
max-absolute-C = 30
max-absolute-D = 40
max-absolute-E = 50
max-absolute-F = 60
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]

[tool.semgrep]
configs = [
    "p/security-audit", "p/bandit", "p/owasp-top-ten", "p/secrets",
    "p/ci", "p/performance", "p/error-prone", "p/best-practices"
]
exclude = [
    "*/tests/*", "*/migrations/*", "*/venv/*", "*/__pycache__/*",
    "*/node_modules/*", "*/build/*", "*/dist/*", "*.egg-info/*"
]

[tool.setuptools.packages.find]
exclude = ["tests*", "docs*", "examples*"]