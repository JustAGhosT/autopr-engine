name: "Generic Dockerfile"
category: "docker"
description: "Generic Dockerfile template for Node.js applications with configurable base image, ports, and commands"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["docker", "nodejs", "generic", "containerization", "deployment"]

template_info:
  name: "Generic Dockerfile"
  type: "containerization"
  framework: "Node.js"
  target_audience: "DevOps engineers, developers"
  primary_use_cases: ["Node.js applications", "API services", "Web applications", "Microservices"]

variables:
  base_image:
    type: "select"
    description: "Base Docker image to use"
    options: ["node:18-alpine", "node:18", "node:20-alpine", "node:20", "node:16-alpine"]
    default: "node:18-alpine"
    required: false

  working_directory:
    type: "string"
    description: "Working directory inside the container"
    default: "/app"
    required: false

  exposed_port:
    type: "integer"
    description: "Port to expose from the container"
    default: 3000
    required: false

  start_command:
    type: "string"
    description: "Command to start the application"
    default: "npm start"
    required: false

  install_dev_dependencies:
    type: "boolean"
    description: "Install development dependencies"
    default: false
    required: false

  copy_source:
    type: "boolean"
    description: "Copy source code into container"
    default: true
    required: false

  health_check:
    type: "boolean"
    description: "Add health check configuration"
    default: false
    required: false

  health_check_url:
    type: "string"
    description: "URL for health check"
    default: "http://localhost:3000/health"
    required: false

  user_setup:
    type: "boolean"
    description: "Create non-root user for security"
    default: false
    required: false

  build_command:
    type: "string"
    description: "Build command to run before starting"
    default: ""
    required: false

variants:
  production:
    description: "Production-optimized configuration"
    variables:
      install_dev_dependencies: false
      user_setup: true
      health_check: true
      base_image: "node:18-alpine"

  development:
    description: "Development-friendly configuration"
    variables:
      install_dev_dependencies: true
      user_setup: false
      health_check: false

  api_service:
    description: "Configuration for API services"
    variables:
      exposed_port: 3000
      health_check: true
      health_check_url: "http://localhost:3000/health"
      user_setup: true

  microservice:
    description: "Configuration for microservices"
    variables:
      base_image: "node:18-alpine"
      user_setup: true
      health_check: true
      install_dev_dependencies: false

usage:
  getting_started:
    - "Place this file as Dockerfile in your project root"
    - "Ensure package.json exists with proper start script"
    - "Build with: docker build -t your-app ."
    - "Run with: docker run -p 3000:3000 your-app"

  best_practices:
    - "Use Alpine images for smaller container size"
    - "Copy package.json first for better layer caching"
    - "Use non-root user in production for security"
    - "Add health checks for container orchestration"
    - "Install only production dependencies in final image"
    - "Use multi-stage builds for complex applications"

  limitations:
    - "Generic template may not suit all application types"
    - "Health check URL must be implemented in application"
    - "Some applications may need additional system dependencies"
    - "Port configuration should match application settings"

template: |
  FROM {{ base_image }}

  {% if user_setup %}
  # Create app user
  RUN addgroup -g 1001 -S nodejs
  RUN adduser -S nextjs -u 1001

  {% endif %}
  WORKDIR {{ working_directory }}

  # Copy package files
  COPY package*.json ./

  # Install dependencies
  {% if install_dev_dependencies %}
  RUN npm ci
  {% else %}
  RUN npm ci --only=production
  {% endif %}

  {% if copy_source %}
  # Copy source code
  COPY . .

  {% endif %}
  {% if build_command %}
  # Build application
  RUN {{ build_command }}

  {% endif %}
  {% if user_setup %}
  # Change ownership to app user
  RUN chown -R nextjs:nodejs {{ working_directory }}
  USER nextjs

  {% endif %}
  # Expose port
  EXPOSE {{ exposed_port }}

  {% if health_check %}
  # Health check
  HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f {{ health_check_url }} || exit 1

  {% endif %}
  # Start application
  CMD ["{{ start_command.split(' ')[0] }}"{% for arg in start_command.split(' ')[1:] %}, "{{ arg }}"{% endfor %}]
