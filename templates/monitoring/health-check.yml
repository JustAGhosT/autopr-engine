name: "Health Check Script Template"
category: "monitoring"
description: "Comprehensive health check script for application monitoring and availability verification"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["monitoring", "health_check", "availability", "script", "devops"]

template_info:
  name: "Health Check Script"
  type: "monitoring_script"
  framework: "bash"
  target_audience: "DevOps engineers, system administrators, monitoring specialists"
  primary_use_cases: ["Application monitoring", "Health verification", "Automated checks", "CI/CD integration"]

variables:
  app_name:
    type: "string"
    description: "Name of the application to monitor"
    default: "my-app"
    required: true

  health_endpoint:
    type: "string"
    description: "Health check endpoint URL"
    default: "http://localhost:3000/health"
    required: true

  timeout_seconds:
    type: "number"
    description: "Timeout for health check requests"
    default: 30
    required: false

  retry_attempts:
    type: "number"
    description: "Number of retry attempts before failing"
    default: 3
    required: false

  check_database:
    type: "boolean"
    description: "Include database connectivity check"
    default: true
    required: false

  check_external_apis:
    type: "boolean"
    description: "Check external API dependencies"
    default: true
    required: false

  enable_notifications:
    type: "boolean"
    description: "Enable failure notifications"
    default: true
    required: false

  notification_webhook:
    type: "string"
    description: "Webhook URL for notifications"
    default: ""
    required: false

variants:
  basic_web_app:
    description: "Basic health check for web applications"
    variables:
      app_name: "web-app"
      health_endpoint: "http://localhost:3000/health"
      timeout_seconds: 10
      retry_attempts: 3
      check_database: false
      check_external_apis: false
      enable_notifications: false

  full_stack_app:
    description: "Comprehensive health check for full-stack applications"
    variables:
      app_name: "full-stack-app"
      health_endpoint: "http://localhost:3000/api/health"
      timeout_seconds: 30
      retry_attempts: 3
      check_database: true
      check_external_apis: true
      enable_notifications: true

  microservice:
    description: "Health check for microservice architecture"
    variables:
      app_name: "microservice"
      health_endpoint: "http://localhost:8080/actuator/health"
      timeout_seconds: 15
      retry_attempts: 5
      check_database: true
      check_external_apis: true
      enable_notifications: true

usage:
  getting_started:
    - "Save script as scripts/health_check.sh"
    - "Make script executable: chmod +x scripts/health_check.sh"
    - "Configure environment variables for your application"
    - "Test script manually: ./scripts/health_check.sh"
    - "Integrate with monitoring systems or CI/CD pipelines"
    - "Set up automated scheduling with cron if needed"

  best_practices:
    - "Keep health checks lightweight and fast"
    - "Include critical dependencies in health verification"
    - "Set appropriate timeouts to avoid false positives"
    - "Log health check results for debugging"
    - "Use exit codes for integration with monitoring tools"
    - "Test health check scripts regularly"

  limitations:
    - "Requires curl or similar HTTP client"
    - "May need adjustment for different application architectures"
    - "Network connectivity required for external checks"
    - "Timeout values should be tuned per environment"

template: |
  #!/bin/bash
  # Health Check Script for {{ app_name }}
  set -e

  # Configuration
  APP_NAME="{{ app_name }}"
  HEALTH_ENDPOINT="{{ health_endpoint }}"
  TIMEOUT={{ timeout_seconds }}
  MAX_RETRIES={{ retry_attempts }}
  {% if notification_webhook %}
  WEBHOOK_URL="{{ notification_webhook }}"
  {% endif %}

  # Colors for output
  RED='\033[0;31m'
  GREEN='\033[0;32m'
  YELLOW='\033[1;33m'
  NC='\033[0m' # No Color

  # Logging function
  log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
  }

  # Success notification
  notify_success() {
    log "${GREEN}✅ Health check passed for $APP_NAME${NC}"
    {% if enable_notifications and notification_webhook %}
    curl -X POST -H 'Content-type: application/json' \
      --data "{\"text\":\"✅ Health check PASSED for $APP_NAME\"}" \
      "$WEBHOOK_URL" 2>/dev/null || true
    {% endif %}
  }

  # Failure notification
  notify_failure() {
    local error_msg="$1"
    log "${RED}❌ Health check failed for $APP_NAME: $error_msg${NC}"
    {% if enable_notifications and notification_webhook %}
    curl -X POST -H 'Content-type: application/json' \
      --data "{\"text\":\"❌ Health check FAILED for $APP_NAME: $error_msg\"}" \
      "$WEBHOOK_URL" 2>/dev/null || true
    {% endif %}
  }

  # HTTP health check with retries
  check_http_health() {
    local endpoint="$1"
    local retries=0

    while [ $retries -lt $MAX_RETRIES ]; do
      log "Checking HTTP health endpoint: $endpoint (attempt $((retries + 1))/$MAX_RETRIES)"

      if curl -f -s --max-time $TIMEOUT "$endpoint" > /dev/null 2>&1; then
        log "${GREEN}✅ HTTP health check passed${NC}"
        return 0
      else
        retries=$((retries + 1))
        if [ $retries -lt $MAX_RETRIES ]; then
          log "${YELLOW}⚠️ HTTP health check failed, retrying in 5 seconds...${NC}"
          sleep 5
        fi
      fi
    done

    return 1
  }

  {% if check_database %}
  # Database connectivity check
  check_database() {
    log "Checking database connectivity..."

    # PostgreSQL check
    if [ ! -z "$DATABASE_URL" ]; then
      if command -v psql >/dev/null 2>&1; then
        if psql "$DATABASE_URL" -c "SELECT 1;" >/dev/null 2>&1; then
          log "${GREEN}✅ Database connectivity check passed${NC}"
          return 0
        else
          log "${RED}❌ Database connectivity check failed${NC}"
          return 1
        fi
      fi
    fi

    # MongoDB check
    if [ ! -z "$MONGODB_URL" ]; then
      if command -v mongo >/dev/null 2>&1; then
        if mongo "$MONGODB_URL" --eval "db.runCommand('ping')" >/dev/null 2>&1; then
          log "${GREEN}✅ MongoDB connectivity check passed${NC}"
          return 0
        else
          log "${RED}❌ MongoDB connectivity check failed${NC}"
          return 1
        fi
      fi
    fi

    # Redis check
    if [ ! -z "$REDIS_URL" ]; then
      if command -v redis-cli >/dev/null 2>&1; then
        if redis-cli -u "$REDIS_URL" ping >/dev/null 2>&1; then
          log "${GREEN}✅ Redis connectivity check passed${NC}"
          return 0
        else
          log "${RED}❌ Redis connectivity check failed${NC}"
          return 1
        fi
      fi
    fi

    log "${YELLOW}⚠️ No database configuration found, skipping database check${NC}"
    return 0
  }
  {% endif %}

  {% if check_external_apis %}
  # External API dependencies check
  check_external_apis() {
    log "Checking external API dependencies..."

    # Check common external services
    local apis=(
      "https://api.github.com/zen"
      "https://httpbin.org/status/200"
    )

    # Add custom APIs from environment
    if [ ! -z "$EXTERNAL_APIS" ]; then
      IFS=',' read -ra CUSTOM_APIS <<< "$EXTERNAL_APIS"
      apis+=("${CUSTOM_APIS[@]}")
    fi

    for api in "${apis[@]}"; do
      if [ ! -z "$api" ]; then
        log "Checking external API: $api"
        if curl -f -s --max-time 10 "$api" > /dev/null 2>&1; then
          log "${GREEN}✅ External API check passed: $api${NC}"
        else
          log "${YELLOW}⚠️ External API check failed: $api${NC}"
          # Don't fail the entire health check for external APIs
        fi
      fi
    done

    return 0
  }
  {% endif %}

  # System resource check
  check_system_resources() {
    log "Checking system resources..."

    # Check disk space
    local disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$disk_usage" -gt 90 ]; then
      log "${RED}❌ Disk usage is critical: ${disk_usage}%${NC}"
      return 1
    elif [ "$disk_usage" -gt 80 ]; then
      log "${YELLOW}⚠️ Disk usage is high: ${disk_usage}%${NC}"
    else
      log "${GREEN}✅ Disk usage is normal: ${disk_usage}%${NC}"
    fi

    # Check memory usage
    local mem_usage=$(free | grep Mem | awk '{printf("%.0f", $3/$2 * 100.0)}')
    if [ "$mem_usage" -gt 90 ]; then
      log "${RED}❌ Memory usage is critical: ${mem_usage}%${NC}"
      return 1
    elif [ "$mem_usage" -gt 80 ]; then
      log "${YELLOW}⚠️ Memory usage is high: ${mem_usage}%${NC}"
    else
      log "${GREEN}✅ Memory usage is normal: ${mem_usage}%${NC}"
    fi

    return 0
  }

  # Main health check function
  main() {
    log "Starting health check for $APP_NAME..."

    local exit_code=0

    # HTTP health check
    if ! check_http_health "$HEALTH_ENDPOINT"; then
      notify_failure "HTTP health check failed"
      exit_code=1
    fi

    {% if check_database %}
    # Database check
    if ! check_database; then
      notify_failure "Database connectivity check failed"
      exit_code=1
    fi
    {% endif %}

    {% if check_external_apis %}
    # External APIs check
    check_external_apis
    {% endif %}

    # System resources check
    if ! check_system_resources; then
      notify_failure "System resources check failed"
      exit_code=1
    fi

    if [ $exit_code -eq 0 ]; then
      notify_success
      log "All health checks completed successfully!"
    else
      log "Health check completed with errors!"
    fi

    exit $exit_code
  }

  # Run main function
  main "$@"
