name: "Alert Notification Script"
category: "monitoring"
description:
  "Bash script for sending alerts and notifications with multiple delivery methods (email, Slack,
  webhooks, logging)"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["monitoring", "alerts", "notifications", "bash", "slack", "email", "webhooks"]

template_info:
  name: "Alert Script"
  type: "monitoring_script"
  framework: "Bash"
  target_audience: "DevOps engineers, system administrators"
  primary_use_cases:
    ["Alert notifications", "Incident management", "System monitoring", "Error reporting"]

variables:
  slack_webhook:
    type: "string"
    description: "Slack webhook URL for notifications"
    default: ""
    required: false

  email_recipient:
    type: "string"
    description: "Email address for alert notifications"
    default: ""
    required: false

  log_file:
    type: "string"
    description: "Log file path for alert history"
    default: "/var/log/alerts.log"
    required: false

  enable_email:
    type: "boolean"
    description: "Enable email notifications"
    default: false
    required: false

  enable_slack:
    type: "boolean"
    description: "Enable Slack notifications"
    default: false
    required: false

  enable_logging:
    type: "boolean"
    description: "Enable logging to file"
    default: true
    required: false

  custom_webhook:
    type: "string"
    description: "Custom webhook URL for notifications"
    default: ""
    required: false

  alert_level:
    type: "select"
    description: "Default alert level"
    options: ["info", "warning", "error", "critical"]
    default: "error"
    required: false

  include_system_info:
    type: "boolean"
    description: "Include system information in alerts"
    default: true
    required: false

variants:
  slack_only:
    description: "Slack notifications only"
    variables:
      enable_slack: true
      enable_email: false
      enable_logging: true

  email_only:
    description: "Email notifications only"
    variables:
      enable_email: true
      enable_slack: false
      enable_logging: true

  comprehensive:
    description: "All notification methods enabled"
    variables:
      enable_slack: true
      enable_email: true
      enable_logging: true
      include_system_info: true

  logging_only:
    description: "Log alerts to file only"
    variables:
      enable_slack: false
      enable_email: false
      enable_logging: true

usage:
  getting_started:
    - "Make the script executable: chmod +x alert.sh"
    - "Configure webhook URLs and email addresses"
    - "Test with: ./alert.sh 'Test Service' 'Test alert message'"
    - "Use in monitoring scripts or cron jobs"

  best_practices:
    - "Set up proper webhook URLs for Slack/Teams integration"
    - "Configure email server settings for email notifications"
    - "Use appropriate alert levels (info, warning, error, critical)"
    - "Include relevant context in alert messages"
    - "Test alert delivery methods regularly"
    - "Implement rate limiting to prevent alert spam"

  limitations:
    - "Email functionality requires mail server configuration"
    - "Webhook delivery depends on network connectivity"
    - "No built-in rate limiting or deduplication"
    - "System information collection may vary across platforms"

template: |
  #!/bin/bash
  # Alert notification script
  set -e

  SERVICE_NAME="$1"
  ERROR_MESSAGE="$2"
  ALERT_LEVEL="${3:-{{ alert_level }}}"

  if [ -z "$SERVICE_NAME" ] || [ -z "$ERROR_MESSAGE" ]; then
      echo "Usage: $0 <service_name> <error_message> [alert_level]"
      echo "Alert levels: info, warning, error, critical"
      exit 1
  fi

  # Configuration
  {% if slack_webhook %}
  SLACK_WEBHOOK="{{ slack_webhook }}"
  {% endif %}
  {% if email_recipient %}
  EMAIL_RECIPIENT="{{ email_recipient }}"
  {% endif %}
  {% if log_file %}
  LOG_FILE="{{ log_file }}"
  {% endif %}
  {% if custom_webhook %}
  CUSTOM_WEBHOOK="{{ custom_webhook }}"
  {% endif %}

  # Get timestamp
  TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

  {% if include_system_info %}
  # Get system information
  HOSTNAME=$(hostname)
  UPTIME=$(uptime | awk '{print $3,$4}' | sed 's/,//')
  LOAD_AVG=$(uptime | awk -F'load average:' '{print $2}')
  MEMORY_USAGE=$(free | grep Mem | awk '{printf("%.1f%%", $3/$2 * 100.0)}')
  DISK_USAGE=$(df -h / | awk 'NR==2{print $5}')
  {% endif %}

  # Format alert message
  ALERT_MESSAGE="🚨 ALERT: $SERVICE_NAME failed - $ERROR_MESSAGE"
  {% if include_system_info %}
  SYSTEM_INFO="Host: $HOSTNAME | Uptime: $UPTIME | Load: $LOAD_AVG | Memory: $MEMORY_USAGE | Disk: $DISK_USAGE"
  FULL_MESSAGE="$ALERT_MESSAGE\n\nSystem Info: $SYSTEM_INFO\nTime: $TIMESTAMP"
  {% else %}
  FULL_MESSAGE="$ALERT_MESSAGE\nTime: $TIMESTAMP"
  {% endif %}

  # Set alert emoji based on level
  case "$ALERT_LEVEL" in
      "info")
          EMOJI="ℹ️"
          ;;
      "warning")
          EMOJI="⚠️"
          ;;
      "error")
          EMOJI="❌"
          ;;
      "critical")
          EMOJI="🔥"
          ;;
      *)
          EMOJI="🚨"
          ;;
  esac

  echo "$EMOJI ALERT [$ALERT_LEVEL]: $SERVICE_NAME failed - $ERROR_MESSAGE"

  {% if enable_logging %}
  # Log to file
  if [ ! -z "$LOG_FILE" ]; then
      echo "$TIMESTAMP [$ALERT_LEVEL] $SERVICE_NAME: $ERROR_MESSAGE" >> "$LOG_FILE"
  fi
  {% endif %}

  {% if enable_slack %}
  # Send to Slack
  if [ ! -z "$SLACK_WEBHOOK" ]; then
      SLACK_PAYLOAD=$(cat <<EOF
  {
      "text": "$EMOJI Alert: $SERVICE_NAME",
      "attachments": [
          {
              "color": "danger",
              "fields": [
                  {
                      "title": "Service",
                      "value": "$SERVICE_NAME",
                      "short": true
                  },
                  {
                      "title": "Level",
                      "value": "$ALERT_LEVEL",
                      "short": true
                  },
                  {
                      "title": "Message",
                      "value": "$ERROR_MESSAGE",
                      "short": false
                  }{% if include_system_info %},
                  {
                      "title": "System Info",
                      "value": "$SYSTEM_INFO",
                      "short": false
                  }{% endif %}
              ],
              "ts": $(date +%s)
          }
      ]
  }
  EOF
  )

      curl -X POST -H 'Content-type: application/json' \
          --data "$SLACK_PAYLOAD" \
          "$SLACK_WEBHOOK" 2>/dev/null || echo "Failed to send Slack notification"
  fi
  {% endif %}

  {% if enable_email %}
  # Send email notification
  if [ ! -z "$EMAIL_RECIPIENT" ]; then
      SUBJECT="[$ALERT_LEVEL] Alert: $SERVICE_NAME"
      echo -e "$FULL_MESSAGE" | mail -s "$SUBJECT" "$EMAIL_RECIPIENT" 2>/dev/null || echo "Failed to send email notification"
  fi
  {% endif %}

  {% if custom_webhook %}
  # Send to custom webhook
  if [ ! -z "$CUSTOM_WEBHOOK" ]; then
      WEBHOOK_PAYLOAD=$(cat <<EOF
  {
      "service": "$SERVICE_NAME",
      "message": "$ERROR_MESSAGE",
      "level": "$ALERT_LEVEL",
      "timestamp": "$TIMESTAMP"{% if include_system_info %},
      "system": {
          "hostname": "$HOSTNAME",
          "uptime": "$UPTIME",
          "load": "$LOAD_AVG",
          "memory": "$MEMORY_USAGE",
          "disk": "$DISK_USAGE"
      }{% endif %}
  }
  EOF
  )

      curl -X POST -H 'Content-type: application/json' \
          --data "$WEBHOOK_PAYLOAD" \
          "$CUSTOM_WEBHOOK" 2>/dev/null || echo "Failed to send webhook notification"
  fi
  {% endif %}

  echo "Alert sent successfully"
