name: "System Monitoring Script"
category: "monitoring"
description: "Bash script for continuous monitoring of CPU and memory usage with configurable intervals and output formats"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["monitoring", "bash", "cpu", "memory", "system", "performance"]

template_info:
  name: "System Monitor"
  type: "monitoring_script"
  framework: "Bash"
  target_audience: "DevOps engineers, system administrators"
  primary_use_cases: ["System monitoring", "Performance tracking", "Resource usage", "Server maintenance"]

variables:
  monitor_interval:
    type: "integer"
    description: "Monitoring interval in seconds"
    default: 30
    required: false

  log_file:
    type: "string"
    description: "Log file path for monitoring output"
    default: ""
    required: false

  cpu_threshold:
    type: "integer"
    description: "CPU usage threshold for alerts (percentage)"
    default: 80
    required: false

  memory_threshold:
    type: "integer"
    description: "Memory usage threshold for alerts (percentage)"
    default: 85
    required: false

  enable_alerts:
    type: "boolean"
    description: "Enable threshold-based alerts"
    default: false
    required: false

  alert_webhook:
    type: "string"
    description: "Webhook URL for sending alerts"
    default: ""
    required: false

  include_disk_usage:
    type: "boolean"
    description: "Include disk usage monitoring"
    default: false
    required: false

  include_network:
    type: "boolean"
    description: "Include network statistics"
    default: false
    required: false

variants:
  basic:
    description: "Basic CPU and memory monitoring"
    variables:
      monitor_interval: 30
      enable_alerts: false

  production:
    description: "Production monitoring with alerts and logging"
    variables:
      monitor_interval: 10
      enable_alerts: true
      cpu_threshold: 80
      memory_threshold: 85
      log_file: "/var/log/system-monitor.log"

  comprehensive:
    description: "Comprehensive monitoring including disk and network"
    variables:
      include_disk_usage: true
      include_network: true
      enable_alerts: true
      monitor_interval: 15

  development:
    description: "Development-friendly monitoring with longer intervals"
    variables:
      monitor_interval: 60
      enable_alerts: false

usage:
  getting_started:
    - "Make the script executable: chmod +x monitor.sh"
    - "Run in background: ./monitor.sh &"
    - "Stop with: pkill -f monitor.sh"
    - "Configure thresholds and intervals as needed"

  best_practices:
    - "Run as a systemd service for production environments"
    - "Use log rotation to prevent disk space issues"
    - "Set appropriate monitoring intervals based on system load"
    - "Configure alerts for critical thresholds"
    - "Monitor the monitoring script itself for failures"
    - "Use process managers like supervisor for reliability"

  limitations:
    - "Requires bash shell and standard Unix utilities"
    - "CPU calculation may vary across different systems"
    - "Network monitoring requires additional tools"
    - "High-frequency monitoring can impact system performance"

template: |
  #!/bin/bash
  # System monitoring script
  set -e

  {% if log_file %}
  LOG_FILE="{{ log_file }}"
  {% endif %}
  MONITOR_INTERVAL={{ monitor_interval }}
  {% if enable_alerts %}
  CPU_THRESHOLD={{ cpu_threshold }}
  MEMORY_THRESHOLD={{ memory_threshold }}
  {% if alert_webhook %}
  ALERT_WEBHOOK="{{ alert_webhook }}"
  {% endif %}
  {% endif %}

  echo "Starting system monitoring..."
  {% if log_file %}
  echo "Logging to: $LOG_FILE"
  {% endif %}

  {% if enable_alerts %}
  # Alert function
  send_alert() {
      local message="$1"
      echo "ALERT: $message"
      {% if log_file %}
      echo "$(date): ALERT: $message" >> "$LOG_FILE"
      {% endif %}
      {% if alert_webhook %}
      curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"ALERT: $message\"}" \
          "$ALERT_WEBHOOK" 2>/dev/null || true
      {% endif %}
  }
  {% endif %}

  # Monitor CPU and memory usage
  while true; do
      # Get current timestamp
      TIMESTAMP=$(date)

      # Get CPU usage
      CPU_USAGE=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)

      # Get memory usage
      MEMORY_USAGE=$(free | grep Mem | awk '{printf("%.2f", $3/$2 * 100.0)}')

      {% if include_disk_usage %}
      # Get disk usage
      DISK_USAGE=$(df -h / | awk 'NR==2{print $5}' | cut -d'%' -f1)
      {% endif %}

      {% if include_network %}
      # Get network statistics (requires additional setup)
      NETWORK_RX=$(cat /proc/net/dev | grep eth0 | awk '{print $2}' || echo "0")
      NETWORK_TX=$(cat /proc/net/dev | grep eth0 | awk '{print $10}' || echo "0")
      {% endif %}

      # Format output
      OUTPUT="$TIMESTAMP: CPU: ${CPU_USAGE}%, Memory: ${MEMORY_USAGE}%"
      {% if include_disk_usage %}
      OUTPUT="$OUTPUT, Disk: ${DISK_USAGE}%"
      {% endif %}
      {% if include_network %}
      OUTPUT="$OUTPUT, Network RX: ${NETWORK_RX}, TX: ${NETWORK_TX}"
      {% endif %}

      echo "$OUTPUT"
      {% if log_file %}
      echo "$OUTPUT" >> "$LOG_FILE"
      {% endif %}

      {% if enable_alerts %}
      # Check thresholds and send alerts
      if (( $(echo "$CPU_USAGE > $CPU_THRESHOLD" | bc -l) )); then
          send_alert "High CPU usage: ${CPU_USAGE}% (threshold: ${CPU_THRESHOLD}%)"
      fi

      if (( $(echo "$MEMORY_USAGE > $MEMORY_THRESHOLD" | bc -l) )); then
          send_alert "High memory usage: ${MEMORY_USAGE}% (threshold: ${MEMORY_THRESHOLD}%)"
      fi

      {% if include_disk_usage %}
      if (( DISK_USAGE > 90 )); then
          send_alert "High disk usage: ${DISK_USAGE}%"
      fi
      {% endif %}
      {% endif %}

      sleep $MONITOR_INTERVAL
  done
