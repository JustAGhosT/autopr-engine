name: "Backup Script"
category: "monitoring"
description: "Bash script for automated backups of databases, files, and configurations with compression and timestamping"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["backup", "bash", "database", "files", "automation", "postgresql", "mysql"]

template_info:
  name: "Backup Script"
  type: "maintenance_script"
  framework: "Bash"
  target_audience: "DevOps engineers, system administrators"
  primary_use_cases: ["Database backups", "File backups", "Configuration backups", "Automated maintenance"]

variables:
  backup_dir:
    type: "string"
    description: "Directory to store backups"
    default: "./backups"
    required: false

  database_type:
    type: "select"
    description: "Database type to backup"
    options: ["postgresql", "mysql", "mongodb", "none"]
    default: "postgresql"
    required: false

  database_url:
    type: "string"
    description: "Database connection URL environment variable name"
    default: "DATABASE_URL"
    required: false

  backup_files:
    type: "boolean"
    description: "Enable file backups"
    default: true
    required: false

  files_directory:
    type: "string"
    description: "Directory containing files to backup"
    default: "./uploads"
    required: false

  backup_config:
    type: "boolean"
    description: "Enable configuration file backups"
    default: true
    required: false

  config_files:
    type: "array"
    description: "Configuration files to backup"
    default: [".env", "config.json"]
    required: false

  compression:
    type: "boolean"
    description: "Enable compression for file backups"
    default: true
    required: false

  retention_days:
    type: "integer"
    description: "Number of days to retain backups (0 = no cleanup)"
    default: 7
    required: false

  remote_backup:
    type: "boolean"
    description: "Enable remote backup upload"
    default: false
    required: false

  remote_destination:
    type: "string"
    description: "Remote backup destination (S3, rsync, etc.)"
    default: ""
    required: false

variants:
  database_only:
    description: "Database backups only"
    variables:
      backup_files: false
      backup_config: false
      database_type: "postgresql"

  files_only:
    description: "File backups only"
    variables:
      database_type: "none"
      backup_files: true
      compression: true

  full_backup:
    description: "Complete backup including database, files, and config"
    variables:
      backup_files: true
      backup_config: true
      compression: true
      retention_days: 7

  production:
    description: "Production backup with remote storage"
    variables:
      backup_files: true
      backup_config: true
      compression: true
      retention_days: 30
      remote_backup: true

usage:
  getting_started:
    - "Make the script executable: chmod +x backup.sh"
    - "Configure database connection and backup directories"
    - "Run manually: ./backup.sh"
    - "Schedule with cron: 0 2 * * * /path/to/backup.sh"

  best_practices:
    - "Test restore procedures regularly"
    - "Store backups in multiple locations"
    - "Monitor backup success and failures"
    - "Encrypt sensitive backups"
    - "Set appropriate retention policies"
    - "Verify backup integrity periodically"

  limitations:
    - "Database credentials must be configured properly"
    - "Large file backups may take significant time"
    - "Remote backup requires additional configuration"
    - "No built-in encryption (add separately if needed)"

template: |
  #!/bin/bash
  # Backup script
  set -e

  # Configuration
  BACKUP_DIR="{{ backup_dir }}"
  TIMESTAMP=$(date +%Y%m%d_%H%M%S)
  {% if retention_days > 0 %}
  RETENTION_DAYS={{ retention_days }}
  {% endif %}

  echo "🔄 Starting backup at $(date)..."

  # Create backup directory
  mkdir -p "$BACKUP_DIR"

  {% if database_type != "none" %}
  # Database backup
  echo "📊 Backing up {{ database_type }} database..."
  
  if [ -z "${{{ database_url }}}" ]; then
      echo "⚠️  Warning: {{ database_url }} environment variable not set, skipping database backup"
  else
      {% if database_type == "postgresql" %}
      pg_dump "${{{ database_url }}}" > "$BACKUP_DIR/db_backup_$TIMESTAMP.sql"
      {% elif database_type == "mysql" %}
      mysqldump --single-transaction --routines --triggers "${{{ database_url }}}" > "$BACKUP_DIR/db_backup_$TIMESTAMP.sql"
      {% elif database_type == "mongodb" %}
      mongodump --uri="${{{ database_url }}}" --out="$BACKUP_DIR/mongodb_backup_$TIMESTAMP"
      {% endif %}
      echo "✅ Database backup completed: db_backup_$TIMESTAMP.sql"
  fi
  {% endif %}

  {% if backup_files %}
  # File backup
  if [ -d "{{ files_directory }}" ]; then
      echo "📁 Backing up files from {{ files_directory }}..."
      {% if compression %}
      tar -czf "$BACKUP_DIR/files_backup_$TIMESTAMP.tar.gz" "{{ files_directory }}"
      echo "✅ Files backup completed: files_backup_$TIMESTAMP.tar.gz"
      {% else %}
      cp -r "{{ files_directory }}" "$BACKUP_DIR/files_backup_$TIMESTAMP"
      echo "✅ Files backup completed: files_backup_$TIMESTAMP/"
      {% endif %}
  else
      echo "⚠️  Warning: {{ files_directory }} directory not found, skipping file backup"
  fi
  {% endif %}

  {% if backup_config %}
  # Configuration backup
  echo "⚙️  Backing up configuration files..."
  {% for config_file in config_files %}
  if [ -f "{{ config_file }}" ]; then
      cp "{{ config_file }}" "$BACKUP_DIR/{{ config_file.replace('/', '_').replace('.', '_') }}_backup_$TIMESTAMP"
      echo "✅ Backed up: {{ config_file }}"
  else
      echo "⚠️  Warning: {{ config_file }} not found"
  fi
  {% endfor %}
  {% endif %}

  {% if retention_days > 0 %}
  # Cleanup old backups
  echo "🧹 Cleaning up backups older than {{ retention_days }} days..."
  find "$BACKUP_DIR" -name "*backup*" -type f -mtime +{{ retention_days }} -delete 2>/dev/null || true
  find "$BACKUP_DIR" -name "*backup*" -type d -mtime +{{ retention_days }} -exec rm -rf {} + 2>/dev/null || true
  echo "✅ Cleanup completed"
  {% endif %}

  {% if remote_backup %}
  # Remote backup
  if [ ! -z "{{ remote_destination }}" ]; then
      echo "☁️  Uploading to remote destination..."
      # Add your remote backup logic here
      # Examples:
      # AWS S3: aws s3 sync "$BACKUP_DIR" "{{ remote_destination }}"
      # rsync: rsync -av "$BACKUP_DIR/" "{{ remote_destination }}"
      # rclone: rclone sync "$BACKUP_DIR" "{{ remote_destination }}"
      echo "✅ Remote backup completed"
  else
      echo "⚠️  Warning: Remote destination not configured"
  fi
  {% endif %}

  # Calculate backup size
  BACKUP_SIZE=$(du -sh "$BACKUP_DIR" | cut -f1)
  echo "📊 Total backup size: $BACKUP_SIZE"

  echo "✅ Backup completed successfully at $(date)"
  echo "📁 Backup location: $BACKUP_DIR"

  # List recent backups
  echo "📋 Recent backups:"
  ls -lah "$BACKUP_DIR" | grep backup | tail -5
