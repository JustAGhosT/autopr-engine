name: "Restore Script"
category: "monitoring"
description:
  "Bash script for restoring databases, files, and configurations from backup files with validation
  and safety checks"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["restore", "bash", "database", "files", "recovery", "postgresql", "mysql"]

template_info:
  name: "Restore Script"
  type: "maintenance_script"
  framework: "Bash"
  target_audience: "DevOps engineers, system administrators"
  primary_use_cases:
    ["Database restoration", "File recovery", "Disaster recovery", "System maintenance"]

variables:
  database_type:
    type: "select"
    description: "Database type to restore"
    options: ["postgresql", "mysql", "mongodb", "auto"]
    default: "auto"
    required: false

  database_url:
    type: "string"
    description: "Database connection URL environment variable name"
    default: "DATABASE_URL"
    required: false

  backup_dir:
    type: "string"
    description: "Directory containing backup files"
    default: "./backups"
    required: false

  confirm_restore:
    type: "boolean"
    description: "Require confirmation before restoring"
    default: true
    required: false

  create_pre_restore_backup:
    type: "boolean"
    description: "Create backup before restoring"
    default: true
    required: false

  validate_backup:
    type: "boolean"
    description: "Validate backup file before restoring"
    default: true
    required: false

  restore_files:
    type: "boolean"
    description: "Enable file restoration"
    default: true
    required: false

  files_destination:
    type: "string"
    description: "Destination directory for file restoration"
    default: "./uploads"
    required: false

  restore_config:
    type: "boolean"
    description: "Enable configuration file restoration"
    default: false
    required: false

  dry_run:
    type: "boolean"
    description: "Show what would be restored without actually doing it"
    default: false
    required: false

variants:
  database_only:
    description: "Database restoration only"
    variables:
      restore_files: false
      restore_config: false
      database_type: "auto"

  files_only:
    description: "File restoration only"
    variables:
      database_type: "auto"
      restore_files: true
      restore_config: false

  full_restore:
    description: "Complete restoration including database, files, and config"
    variables:
      restore_files: true
      restore_config: true
      create_pre_restore_backup: true

  safe_restore:
    description: "Safe restoration with all validation and backups"
    variables:
      confirm_restore: true
      create_pre_restore_backup: true
      validate_backup: true
      dry_run: false

usage:
  getting_started:
    - "Make the script executable: chmod +x restore.sh"
    - "Run with backup file: ./restore.sh backup_file.sql"
    - "For dry run: ./restore.sh backup_file.sql --dry-run"
    - "List available backups: ./restore.sh --list"

  best_practices:
    - "Always test restore procedures in non-production first"
    - "Create pre-restore backups of current state"
    - "Validate backup files before restoration"
    - "Stop application services during restoration"
    - "Verify data integrity after restoration"
    - "Document restoration procedures and test regularly"

  limitations:
    - "Database credentials must be configured properly"
    - "Large file restores may take significant time"
    - "No automatic rollback if restoration fails"
    - "Requires sufficient disk space for restoration"

template: |
  #!/bin/bash
  # Restore script
  set -e

  BACKUP_FILE="$1"
  {% if backup_dir %}
  BACKUP_DIR="{{ backup_dir }}"
  {% endif %}

  # Show usage if no arguments
  if [ $# -eq 0 ]; then
      echo "Usage: $0 <backup_file> [options]"
      echo ""
      echo "Options:"
      echo "  --dry-run    Show what would be restored without doing it"
      echo "  --list       List available backup files"
      echo "  --help       Show this help message"
      echo ""
      echo "Examples:"
      echo "  $0 db_backup_20240126_143022.sql"
      echo "  $0 files_backup_20240126_143022.tar.gz"
      echo "  $0 --list"
      exit 1
  fi

  # Handle special arguments
  case "$1" in
      "--list")
          echo "📋 Available backup files:"
          {% if backup_dir %}
          if [ -d "$BACKUP_DIR" ]; then
              ls -lah "$BACKUP_DIR" | grep backup
          else
              echo "Backup directory not found: $BACKUP_DIR"
          fi
          {% else %}
          ls -lah . | grep backup
          {% endif %}
          exit 0
          ;;
      "--help")
          echo "Restore script for databases, files, and configurations"
          echo ""
          echo "Supported file types:"
          echo "  *.sql     - Database backups (PostgreSQL/MySQL)"
          echo "  *.tar.gz  - Compressed file backups"
          echo "  *.tar     - Uncompressed file backups"
          echo "  *_backup_* - Configuration file backups"
          exit 0
          ;;
  esac

  # Check for dry run
  DRY_RUN={{ dry_run | lower }}
  if [ "$2" = "--dry-run" ] || [ "$1" = "--dry-run" ]; then
      DRY_RUN=true
      if [ "$1" = "--dry-run" ]; then
          BACKUP_FILE="$2"
      fi
  fi

  if [ -z "$BACKUP_FILE" ]; then
      echo "❌ Error: No backup file specified"
      exit 1
  fi

  # Find backup file
  if [ ! -f "$BACKUP_FILE" ]; then
      {% if backup_dir %}
      if [ -f "$BACKUP_DIR/$BACKUP_FILE" ]; then
          BACKUP_FILE="$BACKUP_DIR/$BACKUP_FILE"
      else
          echo "❌ Error: Backup file not found: $BACKUP_FILE"
          echo "💡 Try: $0 --list to see available backups"
          exit 1
      fi
      {% else %}
      echo "❌ Error: Backup file not found: $BACKUP_FILE"
      exit 1
      {% endif %}
  fi

  echo "🔄 Starting restore from: $BACKUP_FILE"

  {% if validate_backup %}
  # Validate backup file
  echo "🔍 Validating backup file..."
  if [ ! -r "$BACKUP_FILE" ]; then
      echo "❌ Error: Cannot read backup file"
      exit 1
  fi

  # Check file size
  FILE_SIZE=$(stat -f%z "$BACKUP_FILE" 2>/dev/null || stat -c%s "$BACKUP_FILE" 2>/dev/null || echo "0")
  if [ "$FILE_SIZE" -eq 0 ]; then
      echo "❌ Error: Backup file is empty"
      exit 1
  fi

  echo "✅ Backup file validation passed (Size: $(du -sh "$BACKUP_FILE" | cut -f1))"
  {% endif %}

  {% if confirm_restore %}
  # Confirmation prompt
  if [ "$DRY_RUN" != "true" ]; then
      echo "⚠️  WARNING: This will restore data from backup and may overwrite existing data!"
      echo "📁 Backup file: $BACKUP_FILE"
      echo "📅 Backup date: $(stat -f%Sm "$BACKUP_FILE" 2>/dev/null || stat -c%y "$BACKUP_FILE" 2>/dev/null || echo "Unknown")"
      read -p "Are you sure you want to continue? (yes/no): " CONFIRM
      if [ "$CONFIRM" != "yes" ]; then
          echo "❌ Restore cancelled"
          exit 1
      fi
  fi
  {% endif %}

  {% if create_pre_restore_backup %}
  # Create pre-restore backup
  if [ "$DRY_RUN" != "true" ]; then
      echo "💾 Creating pre-restore backup..."
      PRE_RESTORE_TIMESTAMP=$(date +%Y%m%d_%H%M%S)

      # Check if database exists and create backup
      {% if database_url %}
      if [ ! -z "${{{ database_url }}}" ]; then
          {% if database_type == "postgresql" or database_type == "auto" %}
          pg_dump "${{{ database_url }}}" > "pre_restore_backup_$PRE_RESTORE_TIMESTAMP.sql" 2>/dev/null || true
          {% elif database_type == "mysql" %}
          mysqldump --single-transaction "${{{ database_url }}}" > "pre_restore_backup_$PRE_RESTORE_TIMESTAMP.sql" 2>/dev/null || true
          {% endif %}
          echo "✅ Pre-restore backup created: pre_restore_backup_$PRE_RESTORE_TIMESTAMP.sql"
      fi
      {% endif %}
  fi
  {% endif %}

  # Determine backup type and restore accordingly
  BASENAME=$(basename "$BACKUP_FILE")

  if [[ "$BASENAME" == *.sql ]]; then
      # Database restore
      echo "🗄️  Restoring database..."

      if [ "$DRY_RUN" = "true" ]; then
          echo "🔍 DRY RUN: Would restore database from $BACKUP_FILE"
          {% if database_url %}
          echo "🔍 DRY RUN: Database URL: ${{{ database_url }}}"
          {% endif %}
      else
          {% if database_url %}
          if [ -z "${{{ database_url }}}" ]; then
              echo "❌ Error: {{ database_url }} environment variable not set"
              exit 1
          fi

          {% if database_type == "postgresql" or database_type == "auto" %}
          # Try PostgreSQL first
          if psql "${{{ database_url }}}" -c '\q' 2>/dev/null; then
              psql "${{{ database_url }}}" < "$BACKUP_FILE"
              echo "✅ PostgreSQL database restored successfully"
          {% if database_type == "auto" %}
          elif mysql -e "SELECT 1" 2>/dev/null; then
              mysql < "$BACKUP_FILE"
              echo "✅ MySQL database restored successfully"
          {% endif %}
          else
              echo "❌ Error: Could not connect to database"
              exit 1
          fi
          {% elif database_type == "mysql" %}
          mysql < "$BACKUP_FILE"
          echo "✅ MySQL database restored successfully"
          {% endif %}
          {% else %}
          echo "❌ Error: Database URL not configured"
          exit 1
          {% endif %}
      fi

  elif [[ "$BASENAME" == *.tar.gz ]] || [[ "$BASENAME" == *.tar ]]; then
      {% if restore_files %}
      # File restore
      echo "📁 Restoring files..."

      if [ "$DRY_RUN" = "true" ]; then
          echo "🔍 DRY RUN: Would extract $BACKUP_FILE to {{ files_destination }}"
          if [[ "$BASENAME" == *.tar.gz ]]; then
              tar -tzf "$BACKUP_FILE" | head -10
          else
              tar -tf "$BACKUP_FILE" | head -10
          fi
      else
          # Create destination directory
          mkdir -p "{{ files_destination }}"

          # Extract files
          if [[ "$BASENAME" == *.tar.gz ]]; then
              tar -xzf "$BACKUP_FILE" -C "{{ files_destination }}" --strip-components=1
          else
              tar -xf "$BACKUP_FILE" -C "{{ files_destination }}" --strip-components=1
          fi
          echo "✅ Files restored to {{ files_destination }}"
      fi
      {% else %}
      echo "⚠️  File restoration is disabled"
      {% endif %}

  elif [[ "$BASENAME" == *_backup_* ]]; then
      {% if restore_config %}
      # Configuration file restore
      echo "⚙️  Restoring configuration..."

      # Extract original filename from backup name
      ORIGINAL_NAME=$(echo "$BASENAME" | sed 's/_backup_[0-9]*_[0-9]*$//')

      if [ "$DRY_RUN" = "true" ]; then
          echo "🔍 DRY RUN: Would restore $BACKUP_FILE to $ORIGINAL_NAME"
      else
          cp "$BACKUP_FILE" "$ORIGINAL_NAME"
          echo "✅ Configuration restored: $ORIGINAL_NAME"
      fi
      {% else %}
      echo "⚠️  Configuration restoration is disabled"
      {% endif %}

  else
      echo "❌ Error: Unknown backup file type: $BASENAME"
      echo "💡 Supported types: *.sql, *.tar.gz, *.tar, *_backup_*"
      exit 1
  fi

  if [ "$DRY_RUN" = "true" ]; then
      echo "🔍 DRY RUN completed - no changes were made"
  else
      echo "✅ Restore completed successfully at $(date)"
      echo "💡 Remember to restart your application if needed"
  fi
