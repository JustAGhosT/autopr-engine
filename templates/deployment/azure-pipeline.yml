name: "Azure DevOps Pipeline Template"
category: "deployment"
description: "Azure DevOps CI/CD pipeline for automated testing, building, and deployment to Azure services"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["deployment", "azure_devops", "ci_cd", "azure", "pipeline"]

template_info:
  name: "Azure DevOps Pipeline"
  type: "deployment_configuration"
  framework: "azure_devops"
  target_audience: "DevOps engineers, Azure developers, CI/CD specialists"
  primary_use_cases: ["Azure deployment", "Continuous integration", "Automated testing", "Build pipelines"]

variables:
  pipeline_name:
    type: "string"
    description: "Name of the Azure DevOps pipeline"
    default: "CI/CD Pipeline"
    required: true

  node_version:
    type: "string"
    description: "Node.js version for the pipeline"
    default: "18.x"
    required: true

  build_command:
    type: "string"
    description: "Command to build the application"
    default: "npm run build"
    required: true

  test_command:
    type: "string"
    description: "Command to run tests"
    default: "npm test"
    required: true

  azure_service:
    type: "select"
    description: "Azure service for deployment"
    options: ["app_service", "static_web_apps", "container_instances", "kubernetes", "functions"]
    default: "app_service"
    required: true

  subscription_name:
    type: "string"
    description: "Azure subscription name"
    default: "$(AZURE_SUBSCRIPTION)"
    required: true

  resource_group:
    type: "string"
    description: "Azure resource group name"
    default: "$(RESOURCE_GROUP)"
    required: true

  app_name:
    type: "string"
    description: "Azure application name"
    default: "$(APP_NAME)"
    required: true

variants:
  react_app_service:
    description: "React application deployment to Azure App Service"
    variables:
      pipeline_name: "React App Service Deployment"
      node_version: "18.x"
      build_command: "npm run build"
      test_command: "npm test -- --coverage --watchAll=false"
      azure_service: "app_service"

  static_web_app:
    description: "Static web application deployment to Azure Static Web Apps"
    variables:
      pipeline_name: "Static Web App Deployment"
      node_version: "18.x"
      build_command: "npm run build"
      test_command: "npm run test:ci"
      azure_service: "static_web_apps"

  node_functions:
    description: "Node.js Azure Functions deployment"
    variables:
      pipeline_name: "Azure Functions Deployment"
      node_version: "18.x"
      build_command: "npm run build"
      test_command: "npm test"
      azure_service: "functions"

usage:
  getting_started:
    - "Create azure-pipelines.yml in your repository root"
    - "Configure Azure DevOps service connection"
    - "Set up required pipeline variables in Azure DevOps"
    - "Configure branch policies and triggers"
    - "Run the pipeline and monitor execution"
    - "Review deployment logs and fix any issues"

  best_practices:
    - "Use variable groups for environment-specific settings"
    - "Enable branch protection policies"
    - "Set up proper approval gates for production"
    - "Use Azure Key Vault for sensitive data"
    - "Monitor pipeline performance and optimize"
    - "Implement proper error handling and notifications"

  limitations:
    - "Requires Azure DevOps organization setup"
    - "Azure service connections need proper permissions"
    - "Some Azure services require additional configuration"
    - "Pipeline agents may have resource limitations"

template: |
  # {{ pipeline_name }}
  
  trigger:
    branches:
      include:
        - main
        - develop
  
  pr:
    branches:
      include:
        - main
  
  pool:
    vmImage: 'ubuntu-latest'
  
  variables:
    nodeVersion: '{{ node_version }}'
    buildConfiguration: 'Release'
  
  stages:
  - stage: Build
    displayName: 'Build and Test'
    jobs:
    - job: BuildJob
      displayName: 'Build Application'
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '$(nodeVersion)'
        displayName: 'Install Node.js'
      
      - task: Cache@2
        inputs:
          key: 'npm | "$(Agent.OS)" | package-lock.json'
          restoreKeys: |
            npm | "$(Agent.OS)"
          path: ~/.npm
        displayName: 'Cache npm packages'
      
      - script: |
          npm ci
        displayName: 'Install dependencies'
      
      - script: |
          npm run lint
        displayName: 'Run linting'
        continueOnError: true
      
      - script: |
          {{ test_command }}
        displayName: 'Run tests'
      
      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'JUnit'
          testResultsFiles: '**/test-results.xml'
          mergeTestResults: true
        displayName: 'Publish test results'
        condition: succeededOrFailed()
      
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '**/coverage/cobertura-coverage.xml'
        displayName: 'Publish code coverage'
        condition: succeededOrFailed()
      
      - script: |
          {{ build_command }}
        displayName: 'Build application'
      
      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: '$(Build.SourcesDirectory)/build'
          artifactName: 'build-artifacts'
        displayName: 'Publish build artifacts'
  
  {% if azure_service == "app_service" %}
  - stage: Deploy
    displayName: 'Deploy to Azure App Service'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
    - deployment: DeployJob
      displayName: 'Deploy to App Service'
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureWebApp@1
              inputs:
                azureSubscription: '{{ subscription_name }}'
                appType: 'webAppLinux'
                appName: '{{ app_name }}'
                package: '$(Pipeline.Workspace)/build-artifacts'
                runtimeStack: 'NODE|{{ node_version }}'
              displayName: 'Deploy to Azure App Service'
  
  {% elif azure_service == "static_web_apps" %}
  - stage: Deploy
    displayName: 'Deploy to Azure Static Web Apps'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
    - deployment: DeployJob
      displayName: 'Deploy to Static Web Apps'
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureStaticWebApp@0
              inputs:
                azure_static_web_apps_api_token: '$(AZURE_STATIC_WEB_APPS_API_TOKEN)'
                app_location: '/'
                output_location: 'build'
              displayName: 'Deploy to Azure Static Web Apps'
  
  {% elif azure_service == "functions" %}
  - stage: Deploy
    displayName: 'Deploy to Azure Functions'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
    - deployment: DeployJob
      displayName: 'Deploy to Azure Functions'
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: '{{ subscription_name }}'
                appType: 'functionAppLinux'
                appName: '{{ app_name }}'
                package: '$(Pipeline.Workspace)/build-artifacts'
                runtimeStack: 'NODE|{{ node_version }}'
              displayName: 'Deploy to Azure Functions'
  
  {% elif azure_service == "container_instances" %}
  - stage: Deploy
    displayName: 'Deploy to Azure Container Instances'
    dependsOn: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
    - deployment: DeployJob
      displayName: 'Deploy to Container Instances'
      environment: 'production'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: Docker@2
              inputs:
                containerRegistry: '$(CONTAINER_REGISTRY)'
                repository: '{{ app_name }}'
                command: 'buildAndPush'
                Dockerfile: '**/Dockerfile'
                tags: |
                  $(Build.BuildId)
                  latest
              displayName: 'Build and push Docker image'
            
            - task: AzureContainerInstances@0
              inputs:
                azureSubscription: '{{ subscription_name }}'
                resourceGroup: '{{ resource_group }}'
                location: 'East US'
                imageSource: 'Container Registry'
                azureContainerRegistry: '$(CONTAINER_REGISTRY)'
                containerName: '{{ app_name }}'
                repositoryName: '{{ app_name }}'
                tag: '$(Build.BuildId)'
                ports: '80'
              displayName: 'Deploy to Azure Container Instances'
  {% endif %}
