name: "React Error Boundary Component Template"
category: "testing"
description: "Production-ready React Error Boundary component with error logging and user-friendly fallback UI"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["testing", "react", "error_boundary", "error_handling", "production"]

template_info:
  name: "React Error Boundary"
  type: "component_template"
  framework: "react"
  target_audience: "React developers, frontend engineers, production teams"
  primary_use_cases: ["Error handling", "Production error recovery", "User experience", "Error logging"]

variables:
  component_name:
    type: "string"
    description: "Name of the error boundary component"
    default: "ErrorBoundary"
    required: true

  enable_logging:
    type: "boolean"
    description: "Enable error logging to external service"
    default: true
    required: false

  logging_service:
    type: "select"
    description: "Error logging service to use"
    options: ["sentry", "bugsnag", "rollbar", "custom", "console"]
    default: "sentry"
    required: false

  fallback_type:
    type: "select"
    description: "Type of fallback UI to display"
    options: ["simple", "detailed", "custom"]
    default: "detailed"
    required: false

  enable_retry:
    type: "boolean"
    description: "Enable retry functionality for users"
    default: true
    required: false

  enable_reload:
    type: "boolean"
    description: "Enable page reload option"
    default: true
    required: false

variants:
  production_ready:
    description: "Full-featured error boundary for production use"
    variables:
      component_name: "ErrorBoundary"
      enable_logging: true
      logging_service: "sentry"
      fallback_type: "detailed"
      enable_retry: true
      enable_reload: true

  development:
    description: "Development-focused error boundary with detailed debugging"
    variables:
      component_name: "DevErrorBoundary"
      enable_logging: true
      logging_service: "console"
      fallback_type: "detailed"
      enable_retry: true
      enable_reload: false

  minimal:
    description: "Minimal error boundary for simple applications"
    variables:
      component_name: "SimpleErrorBoundary"
      enable_logging: false
      logging_service: "console"
      fallback_type: "simple"
      enable_retry: false
      enable_reload: true

usage:
  getting_started:
    - "Save component as src/components/ErrorBoundary.tsx"
    - "Wrap your app or components with the ErrorBoundary"
    - "Configure error logging service if enabled"
    - "Test error boundary with intentional errors"
    - "Customize fallback UI to match your design"
    - "Monitor error reports in production"

  best_practices:
    - "Place error boundaries at strategic component tree levels"
    - "Always log errors to external services in production"
    - "Provide meaningful error messages to users"
    - "Test error boundaries with various error scenarios"
    - "Don't catch errors in event handlers (use try-catch)"
    - "Monitor and analyze error patterns regularly"

  limitations:
    - "Cannot catch errors in event handlers"
    - "Cannot catch errors in asynchronous code"
    - "Cannot catch errors during SSR"
    - "Cannot catch errors in the error boundary itself"

template: |
  import React, { Component, ErrorInfo, ReactNode } from 'react';
  {% if enable_logging and logging_service == "sentry" %}
  import * as Sentry from '@sentry/react';
  {% endif %}
  
  interface Props {
    children: ReactNode;
    fallback?: ReactNode;
    onError?: (error: Error, errorInfo: ErrorInfo) => void;
  }
  
  interface State {
    hasError: boolean;
    error?: Error;
    errorInfo?: ErrorInfo;
  }
  
  class {{ component_name }} extends Component<Props, State> {
    constructor(props: Props) {
      super(props);
      this.state = { hasError: false };
    }
  
    static getDerivedStateFromError(error: Error): State {
      // Update state so the next render will show the fallback UI
      return { hasError: true, error };
    }
  
    componentDidCatch(error: Error, errorInfo: ErrorInfo) {
      {% if enable_logging %}
      // Log error to external service
      {% if logging_service == "sentry" %}
      Sentry.captureException(error, {
        contexts: {
          react: {
            componentStack: errorInfo.componentStack,
          },
        },
      });
      {% elif logging_service == "bugsnag" %}
      // Bugsnag.notify(error, (event) => {
      //   event.addMetadata('react', errorInfo);
      // });
      {% elif logging_service == "rollbar" %}
      // Rollbar.error(error, errorInfo);
      {% elif logging_service == "console" %}
      console.error('Error caught by {{ component_name }}:', error);
      console.error('Error info:', errorInfo);
      {% else %}
      // Custom logging implementation
      this.logError(error, errorInfo);
      {% endif %}
      {% endif %}
  
      // Update state with error details
      this.setState({
        error,
        errorInfo,
      });
  
      // Call custom error handler if provided
      if (this.props.onError) {
        this.props.onError(error, errorInfo);
      }
    }
  
    {% if enable_logging and logging_service == "custom" %}
    private logError = (error: Error, errorInfo: ErrorInfo) => {
      // Implement your custom error logging logic here
      const errorData = {
        message: error.message,
        stack: error.stack,
        componentStack: errorInfo.componentStack,
        timestamp: new Date().toISOString(),
        userAgent: navigator.userAgent,
        url: window.location.href,
      };
  
      // Send to your logging service
      fetch('/api/errors', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(errorData),
      }).catch(console.error);
    };
    {% endif %}
  
    {% if enable_retry %}
    private handleRetry = () => {
      this.setState({ hasError: false, error: undefined, errorInfo: undefined });
    };
    {% endif %}
  
    {% if enable_reload %}
    private handleReload = () => {
      window.location.reload();
    };
    {% endif %}
  
    render() {
      if (this.state.hasError) {
        // Custom fallback UI
        if (this.props.fallback) {
          return this.props.fallback;
        }
  
        {% if fallback_type == "simple" %}
        return (
          <div style={{
            padding: '20px',
            textAlign: 'center',
            backgroundColor: '#f8f9fa',
            border: '1px solid #dee2e6',
            borderRadius: '8px',
            margin: '20px'
          }}>
            <h2>Something went wrong</h2>
            <p>We're sorry, but something unexpected happened.</p>
            {% if enable_retry %}
            <button 
              onClick={this.handleRetry}
              style={{
                padding: '10px 20px',
                backgroundColor: '#007bff',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer',
                marginRight: '10px'
              }}
            >
              Try Again
            </button>
            {% endif %}
            {% if enable_reload %}
            <button 
              onClick={this.handleReload}
              style={{
                padding: '10px 20px',
                backgroundColor: '#6c757d',
                color: 'white',
                border: 'none',
                borderRadius: '4px',
                cursor: 'pointer'
              }}
            >
              Reload Page
            </button>
            {% endif %}
          </div>
        );
        {% elif fallback_type == "detailed" %}
        return (
          <div style={{
            padding: '40px',
            maxWidth: '600px',
            margin: '20px auto',
            backgroundColor: '#f8f9fa',
            border: '1px solid #dee2e6',
            borderRadius: '12px',
            fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif'
          }}>
            <div style={{ textAlign: 'center', marginBottom: '30px' }}>
              <div style={{
                fontSize: '48px',
                marginBottom: '16px'
              }}>⚠️</div>
              <h1 style={{
                fontSize: '24px',
                fontWeight: '600',
                color: '#495057',
                marginBottom: '8px'
              }}>
                Oops! Something went wrong
              </h1>
              <p style={{
                fontSize: '16px',
                color: '#6c757d',
                lineHeight: '1.5'
              }}>
                We encountered an unexpected error. Our team has been notified and is working on a fix.
              </p>
            </div>
  
            {% if process.env.NODE_ENV === 'development' %}
            <details style={{
              backgroundColor: '#fff',
              border: '1px solid #dee2e6',
              borderRadius: '8px',
              padding: '16px',
              marginBottom: '20px'
            }}>
              <summary style={{
                cursor: 'pointer',
                fontWeight: '600',
                color: '#495057'
              }}>
                Error Details (Development Only)
              </summary>
              <pre style={{
                marginTop: '12px',
                fontSize: '12px',
                color: '#dc3545',
                overflow: 'auto',
                backgroundColor: '#f8f9fa',
                padding: '12px',
                borderRadius: '4px'
              }}>
                {this.state.error?.toString()}
                {this.state.errorInfo?.componentStack}
              </pre>
            </details>
            {% endif %}
  
            <div style={{
              display: 'flex',
              justifyContent: 'center',
              gap: '12px',
              flexWrap: 'wrap'
            }}>
              {% if enable_retry %}
              <button 
                onClick={this.handleRetry}
                style={{
                  padding: '12px 24px',
                  backgroundColor: '#007bff',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  fontSize: '14px',
                  fontWeight: '500',
                  cursor: 'pointer',
                  transition: 'background-color 0.2s'
                }}
                onMouseOver={(e) => e.target.style.backgroundColor = '#0056b3'}
                onMouseOut={(e) => e.target.style.backgroundColor = '#007bff'}
              >
                Try Again
              </button>
              {% endif %}
              {% if enable_reload %}
              <button 
                onClick={this.handleReload}
                style={{
                  padding: '12px 24px',
                  backgroundColor: '#6c757d',
                  color: 'white',
                  border: 'none',
                  borderRadius: '6px',
                  fontSize: '14px',
                  fontWeight: '500',
                  cursor: 'pointer',
                  transition: 'background-color 0.2s'
                }}
                onMouseOver={(e) => e.target.style.backgroundColor = '#545b62'}
                onMouseOut={(e) => e.target.style.backgroundColor = '#6c757d'}
              >
                Reload Page
              </button>
              {% endif %}
            </div>
          </div>
        );
        {% else %}
        // Custom fallback UI - implement your own design
        return (
          <div className="error-boundary-fallback">
            <h1>Custom Error UI</h1>
            <p>Implement your custom error boundary UI here</p>
            {% if enable_retry %}
            <button onClick={this.handleRetry}>Retry</button>
            {% endif %}
            {% if enable_reload %}
            <button onClick={this.handleReload}>Reload</button>
            {% endif %}
          </div>
        );
        {% endif %}
      }
  
      return this.props.children;
    }
  }
  
  export default {{ component_name }};
  
  // HOC for easier usage
  export const with{{ component_name }} = <P extends object>(
    Component: React.ComponentType<P>
  ) => {
    const Wrapped = (props: P) => (
      <{{ component_name }}>
        <Component {...props} />
      </{{ component_name }}>
    );
    
    Wrapped.displayName = `with{{ component_name }}(${Component.displayName || Component.name})`;
    return Wrapped;
  };
  
  // Hook for error boundary context
  export const useErrorHandler = () => {
    return (error: Error, errorInfo?: ErrorInfo) => {
      // This can be used to manually trigger error boundary
      throw error;
    };
  };
