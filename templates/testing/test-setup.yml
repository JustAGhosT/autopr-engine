name: "Test Setup Configuration Template"
category: "testing"
description: "Comprehensive test setup for React applications with Jest, Vitest, and Testing Library"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["testing", "jest", "vitest", "react", "testing_library"]

template_info:
  name: "Test Setup Configuration"
  type: "testing_configuration"
  framework: "react"
  target_audience: "Frontend developers, QA engineers, testing specialists"
  primary_use_cases: ["Unit testing", "Integration testing", "Test environment setup", "Mock configuration"]

variables:
  testing_framework:
    type: "select"
    description: "Testing framework to use"
    options: ["jest", "vitest", "both"]
    default: "vitest"
    required: true

  enable_dom_testing:
    type: "boolean"
    description: "Enable DOM testing with jsdom"
    default: true
    required: false

  enable_coverage:
    type: "boolean"
    description: "Enable code coverage reporting"
    default: true
    required: false

  enable_mocks:
    type: "boolean"
    description: "Enable global mocks and utilities"
    default: true
    required: false

  enable_accessibility:
    type: "boolean"
    description: "Enable accessibility testing utilities"
    default: true
    required: false

variants:
  comprehensive:
    description: "Full testing setup with all features enabled"
    variables:
      testing_framework: "vitest"
      enable_dom_testing: true
      enable_coverage: true
      enable_mocks: true
      enable_accessibility: true

  minimal:
    description: "Minimal testing setup for basic unit tests"
    variables:
      testing_framework: "vitest"
      enable_dom_testing: true
      enable_coverage: false
      enable_mocks: false
      enable_accessibility: false

  jest_legacy:
    description: "Jest-based setup for legacy projects"
    variables:
      testing_framework: "jest"
      enable_dom_testing: true
      enable_coverage: true
      enable_mocks: true
      enable_accessibility: false

usage:
  getting_started:
    - "Install testing dependencies based on chosen framework"
    - "Save configuration as src/test/setup.ts"
    - "Update test configuration to import this setup file"
    - "Run tests to verify setup: npm test"
    - "Add custom matchers and utilities as needed"
    - "Configure IDE for better testing experience"

  best_practices:
    - "Keep test setup minimal and focused"
    - "Use global mocks sparingly"
    - "Enable accessibility testing for better UX"
    - "Configure code coverage thresholds"
    - "Use consistent testing patterns across the project"
    - "Regular cleanup of test utilities and mocks"

  limitations:
    - "Global mocks can interfere with some tests"
    - "jsdom has limitations compared to real browsers"
    - "Coverage reporting may impact test performance"
    - "Some browser APIs may need additional polyfills"

template: |
  {% if testing_framework == "jest" or testing_framework == "both" %}
  // Jest setup
  import '@testing-library/jest-dom';
  {% endif %}
  {% if testing_framework == "vitest" or testing_framework == "both" %}
  // Vitest setup
  import '@testing-library/jest-dom';
  import { cleanup } from '@testing-library/react';
  import { afterEach, vi } from 'vitest';
  {% endif %}
  {% if enable_accessibility %}
  import 'jest-axe/extend-expect';
  {% endif %}

  {% if testing_framework == "vitest" or testing_framework == "both" %}
  // Cleanup after each test
  afterEach(() => {
    cleanup();
  });
  {% endif %}

  {% if enable_mocks %}
  // Global mocks
  {% if testing_framework == "vitest" or testing_framework == "both" %}
  // Mock IntersectionObserver
  global.IntersectionObserver = vi.fn(() => ({
    observe: vi.fn(),
    disconnect: vi.fn(),
    unobserve: vi.fn()
  }));

  // Mock ResizeObserver
  global.ResizeObserver = vi.fn(() => ({
    observe: vi.fn(),
    disconnect: vi.fn(),
    unobserve: vi.fn()
  }));

  // Mock matchMedia
  Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: vi.fn().mockImplementation(query => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: vi.fn(), // deprecated
      removeListener: vi.fn(), // deprecated
      addEventListener: vi.fn(),
      removeEventListener: vi.fn(),
      dispatchEvent: vi.fn(),
    })),
  });

  // Mock scrollTo
  global.scrollTo = vi.fn();

  // Mock localStorage
  const localStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
  };
  global.localStorage = localStorageMock;

  // Mock sessionStorage
  const sessionStorageMock = {
    getItem: vi.fn(),
    setItem: vi.fn(),
    removeItem: vi.fn(),
    clear: vi.fn(),
  };
  global.sessionStorage = sessionStorageMock;
  {% else %}
  // Mock IntersectionObserver
  global.IntersectionObserver = jest.fn(() => ({
    observe: jest.fn(),
    disconnect: jest.fn(),
    unobserve: jest.fn()
  }));

  // Mock ResizeObserver
  global.ResizeObserver = jest.fn(() => ({
    observe: jest.fn(),
    disconnect: jest.fn(),
    unobserve: jest.fn()
  }));

  // Mock matchMedia
  Object.defineProperty(window, 'matchMedia', {
    writable: true,
    value: jest.fn().mockImplementation(query => ({
      matches: false,
      media: query,
      onchange: null,
      addListener: jest.fn(), // deprecated
      removeListener: jest.fn(), // deprecated
      addEventListener: jest.fn(),
      removeEventListener: jest.fn(),
      dispatchEvent: jest.fn(),
    })),
  });

  // Mock scrollTo
  global.scrollTo = jest.fn();

  // Mock localStorage
  const localStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
  };
  global.localStorage = localStorageMock;

  // Mock sessionStorage
  const sessionStorageMock = {
    getItem: jest.fn(),
    setItem: jest.fn(),
    removeItem: jest.fn(),
    clear: jest.fn(),
  };
  global.sessionStorage = sessionStorageMock;
  {% endif %}
  {% endif %}

  {% if enable_dom_testing %}
  // Configure jsdom environment
  {% if testing_framework == "vitest" or testing_framework == "both" %}
  Object.defineProperty(window, 'location', {
    value: {
      href: 'http://localhost:3000',
      origin: 'http://localhost:3000',
      protocol: 'http:',
      host: 'localhost:3000',
      hostname: 'localhost',
      port: '3000',
      pathname: '/',
      search: '',
      hash: ''
    },
    writable: true
  });
  {% endif %}

  // Mock console methods for cleaner test output
  const originalError = console.error;
  beforeAll(() => {
    console.error = (...args) => {
      if (
        typeof args[0] === 'string' &&
        args[0].includes('Warning: ReactDOM.render is no longer supported')
      ) {
        return;
      }
      originalError.call(console, ...args);
    };
  });

  afterAll(() => {
    console.error = originalError;
  });
  {% endif %}

  {% if enable_accessibility %}
  // Accessibility testing utilities
  import { axe, toHaveNoViolations } from 'jest-axe';

  expect.extend(toHaveNoViolations);

  // Global accessibility test helper
  global.testA11y = async (component) => {
    const results = await axe(component);
    expect(results).toHaveNoViolations();
  };
  {% endif %}

  // Custom test utilities
  export const createMockProps = (overrides = {}) => ({
    // Default mock props
    ...overrides
  });

  export const waitForLoadingToFinish = () =>
    waitFor(() => expect(screen.queryByTestId('loading')).not.toBeInTheDocument());

  // Custom render function with providers
  import { render } from '@testing-library/react';
  import { BrowserRouter } from 'react-router-dom';

  export const renderWithRouter = (ui, options = {}) => {
    const Wrapper = ({ children }) => (
      <BrowserRouter>{children}</BrowserRouter>
    );

    return render(ui, { wrapper: Wrapper, ...options });
  };

  // Test data factories
  export const createMockUser = (overrides = {}) => ({
    id: '1',
    name: 'Test User',
    email: 'test@example.com',
    ...overrides
  });

  export const createMockApiResponse = (data, overrides = {}) => ({
    data,
    status: 200,
    statusText: 'OK',
    ...overrides
  });
