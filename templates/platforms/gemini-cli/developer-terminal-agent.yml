name: "Gemini CLI Developer Agent Template"
category: "ai_agent_builder"
description: "Google's free open-source AI agent for terminal integration - Unmatched free usage with Gemini 2.5 Pro access"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["ai_agent_builder", "terminal_integration", "developer_tools", "open_source", "free_tier"]

platform_info:
  name: "Gemini CLI"
  website: "https://github.com/google/gemini-cli"
  type: "ai_agent_builder_platform"
  ranking: "Free open-source terminal AI agent (Google June 2025)"
  founded: "2025"
  announcement: "June 25, 2025"
  pricing_model: "Free open-source with optional paid tiers"
  target_audience: "Developers, DevOps engineers, terminal power users, automation enthusiasts"
  primary_use_cases: ["Terminal workflow automation", "Code assistance and debugging", "File manipulation", "Command execution", "Development productivity"]

  key_features:
    - "Free open-source (Apache 2.0 license) AI agent"
    - "Direct terminal integration for developers"
    - "Unmatched free usage: 60 requests/minute, 1,000/day"
    - "Gemini 2.5 Pro access with personal Google account"
    - "Built-in tools for web search and file manipulation"
    - "Model Context Protocol (MCP) support for extensions"
    - "Command execution and dynamic troubleshooting"
    - "Extensible architecture with community contributions"
    - "Integration with existing workflows and scripts"
    - "Real-time web context and Google Search grounding"

  strengths:
    - "Completely free with generous usage limits"
    - "Open-source transparency and community contributions"
    - "Native terminal integration for developer workflows"
    - "Powerful Gemini 2.5 Pro model access"
    - "Extensible with MCP and custom extensions"
    - "No vendor lock-in with open-source model"
    - "Google's enterprise backing and long-term support"
    - "Seamless integration with existing development tools"

  limitations:
    - "Terminal-focused, not suitable for GUI applications"
    - "Requires command-line familiarity"
    - "Free tier has usage limits (though generous)"
    - "Primarily designed for individual developer use"
    - "Limited to text-based interactions"
    - "Requires internet connectivity for model access"

  pricing:
    free_tier: "60 requests/minute, 1,000 requests/day with personal Google account"
    google_ai_studio: "Usage-based billing for higher volumes"
    vertex_ai: "Enterprise pricing for business use"
    gemini_code_assist: "Professional developer subscriptions available"

variables:
  agent_name:
    type: "string"
    description: "Name for your terminal AI agent configuration"
    default: "MyTerminalAgent"
    required: true

  primary_use_case:
    type: "select"
    description: "Primary way you'll use Gemini CLI"
    options: ["code_assistance", "file_management", "system_administration", "automation_scripting", "debugging_troubleshooting", "research_analysis", "general_productivity"]
    default: "code_assistance"
    required: true

  integration_level:
    type: "select"
    description: "How deeply to integrate with your development workflow"
    options: ["basic_commands", "shell_integration", "script_automation", "workflow_integration", "ci_cd_pipeline"]
    default: "shell_integration"
    required: true

  extension_preferences:
    type: "multi_select"
    description: "Extensions and integrations to enable"
    options: ["mcp_extensions", "git_integration", "docker_support", "kubernetes_tools", "cloud_cli_tools", "database_connections", "api_testing", "file_watchers"]
    default: ["git_integration", "docker_support"]
    required: false

  customization_level:
    type: "select"
    description: "Level of customization and personalization"
    options: ["default_settings", "custom_prompts", "personalized_instructions", "workflow_templates", "advanced_scripting"]
    default: "custom_prompts"
    required: true

  security_preferences:
    type: "select"
    description: "Security and privacy configuration"
    options: ["standard_security", "enhanced_privacy", "enterprise_security", "air_gapped_usage"]
    default: "standard_security"
    required: true

  collaboration_needs:
    type: "select"
    description: "Team collaboration and sharing requirements"
    options: ["individual_use", "team_sharing", "organization_wide", "open_source_contribution"]
    default: "individual_use"
    required: true

  development_environment:
    type: "multi_select"
    description: "Development environments and tools you use"
    options: ["vscode", "vim_neovim", "emacs", "jetbrains_ides", "terminal_only", "docker", "kubernetes", "cloud_shells"]
    default: ["vscode", "terminal_only"]
    required: false

variants:
  code_development_assistant:
    description: "AI-powered coding assistance and debugging in terminal"
    variables:
      primary_use_case: "code_assistance"
      integration_level: "workflow_integration"
      extension_preferences: ["git_integration", "docker_support", "api_testing"]
      customization_level: "personalized_instructions"

  devops_automation_agent:
    description: "System administration and DevOps automation assistant"
    variables:
      primary_use_case: "system_administration"
      integration_level: "script_automation"
      extension_preferences: ["docker_support", "kubernetes_tools", "cloud_cli_tools"]
      customization_level: "advanced_scripting"

  research_productivity_tool:
    description: "Research and analysis assistant with web search integration"
    variables:
      primary_use_case: "research_analysis"
      integration_level: "basic_commands"
      extension_preferences: ["mcp_extensions", "api_testing", "file_watchers"]
      customization_level: "custom_prompts"

  team_development_helper:
    description: "Collaborative development assistance for team workflows"
    variables:
      primary_use_case: "code_assistance"
      integration_level: "ci_cd_pipeline"
      extension_preferences: ["git_integration", "docker_support", "kubernetes_tools"]
      collaboration_needs: "team_sharing"
      customization_level: "workflow_templates"

usage:
  getting_started:
    - "Install Gemini CLI using package manager or from source"
    - "Authenticate with Google account for free tier access"
    - "Configure basic settings and preferences"
    - "Test basic functionality with simple commands"
    - "Set up shell integration and aliases"
    - "Install and configure desired extensions"
    - "Customize prompts and instructions for your workflow"
    - "Integrate with existing development tools and scripts"
    - "Set up automation and workflow templates"
    - "Configure security and privacy settings"
    - "Share configurations with team if needed"

  best_practices:
    - "Start with simple commands and gradually increase complexity"
    - "Customize prompts and instructions for your specific needs"
    - "Use shell integration for seamless workflow incorporation"
    - "Leverage MCP extensions for additional capabilities"
    - "Monitor usage to stay within free tier limits"
    - "Keep the CLI updated for latest features and security"
    - "Use version control for custom configurations"
    - "Document custom workflows and templates for team sharing"
    - "Implement proper error handling in automated scripts"
    - "Regular backup of important configurations and data"
    - "Contribute to open-source community when possible"

  limitations:
    - "Requires terminal/command-line proficiency"
    - "Free tier has generous but finite usage limits"
    - "Text-based interactions only (no GUI elements)"
    - "Requires internet connectivity for AI model access"
    - "May not be suitable for complex visual development tasks"
    - "Learning curve for advanced customization and scripting"

  dependencies:
    - "Terminal/shell environment (bash, zsh, fish, etc.)"
    - "Internet connectivity for Google AI model access"
    - "Google account for authentication"
    - "Node.js runtime (for some extensions)"
    - "Git (for version control integration)"
    - "Docker (for containerization features)"

examples:
  automated_code_review_assistant:
    description: "AI-powered code review and quality analysis workflow"
    features:
      - "Automated code analysis and suggestions"
      - "Git integration for commit and PR reviews"
      - "Code quality metrics and reporting"
      - "Security vulnerability scanning"
      - "Documentation generation and updates"
      - "Test coverage analysis and recommendations"
      - "Refactoring suggestions and automation"
      - "Integration with CI/CD pipelines"
    complexity: "medium"
    estimated_time: "2-4 weeks"
    integrations: ["git", "ci_cd_tools", "code_analysis_tools"]

  intelligent_deployment_manager:
    description: "Smart deployment and infrastructure management assistant"
    features:
      - "Automated deployment script generation"
      - "Infrastructure monitoring and alerts"
      - "Container orchestration assistance"
      - "Cloud resource optimization recommendations"
      - "Rollback and recovery automation"
      - "Performance monitoring and analysis"
      - "Cost optimization suggestions"
      - "Security compliance checking"
    complexity: "high"
    estimated_time: "4-6 weeks"
    integrations: ["docker", "kubernetes", "cloud_platforms", "monitoring_tools"]

  research_documentation_system:
    description: "Automated research and documentation generation workflow"
    features:
      - "Web research and information gathering"
      - "Automated documentation generation"
      - "Code documentation and API docs"
      - "Research report compilation"
      - "Citation management and verification"
      - "Content organization and structuring"
      - "Multi-format output generation"
      - "Version control and collaboration"
    complexity: "medium"
    estimated_time: "3-5 weeks"
    integrations: ["web_search", "documentation_tools", "version_control"]
