name: "BuildShip Visual Backend Builder Template"
description: "Visual backend and API builder with workflow automation and database integration"
category: "no_code_platform"
platforms: ["buildship"]
version: "1.0.0"
file_extension: "json"

platform_info:
  name: "BuildShip"
  type: "backend_automation"
  tier: "tier_3"
  target_audience: "developers, technical users, automation specialists"
  pricing:
    free_tier: "1000 workflow executions, basic features"
    starter: "$19/month - 10000 executions, advanced nodes"
    pro: "$49/month - 50000 executions, premium features"
    enterprise: "Custom pricing - unlimited executions, dedicated support"
  key_features:
    - "Visual workflow builder for backend logic"
    - "Auto-generated REST APIs"
    - "Database integration and management"
    - "Third-party service integrations"
    - "Scheduled workflows and triggers"
    - "Real-time data processing"
    - "Custom code nodes for advanced logic"
    - "Webhook and event-driven automation"
  limitations:
    - "Newer platform with evolving feature set"
    - "Limited documentation and community"
    - "Execution-based pricing can get expensive"
    - "Learning curve for complex workflows"

variables:
  workflow_type:
    type: "string"
    required: true
    description: "Primary type of backend workflow"
    examples: ["api_service", "data_processing", "automation", "integration", "scheduled_task"]
  
  data_sources:
    type: "array"
    default: []
    description: "External data sources to integrate"
    examples: [["database"], ["database", "api"], ["database", "api", "webhook"]]
  
  automation_triggers:
    type: "array"
    default: ["manual"]
    description: "Workflow trigger mechanisms"
    examples: [["manual"], ["webhook"], ["schedule"], ["webhook", "schedule", "database_change"]]
  
  complexity_level:
    type: "string"
    default: "medium"
    description: "Workflow complexity and logic requirements"
    examples: ["simple", "medium", "complex", "enterprise"]
  
  real_time_processing:
    type: "boolean"
    default: false
    description: "Enable real-time data processing capabilities"
  
  custom_code_required:
    type: "boolean"
    default: false
    description: "Whether custom code nodes are needed"

variants:
  api_backend_service:
    description: "RESTful API service with database operations"
    variables:
      workflow_type: "api_service"
      data_sources: ["database", "api"]
      automation_triggers: ["webhook"]
      complexity_level: "medium"
    features:
      - "CRUD API endpoints"
      - "Data validation and transformation"
      - "Authentication and authorization"
      - "Error handling and logging"
      - "Rate limiting and security"
  
  data_synchronization:
    description: "Automated data sync between multiple systems"
    variables:
      workflow_type: "data_processing"
      data_sources: ["database", "api", "webhook"]
      automation_triggers: ["schedule", "webhook"]
      complexity_level: "complex"
    features:
      - "Multi-source data integration"
      - "Data transformation and mapping"
      - "Conflict resolution logic"
      - "Scheduled synchronization"
      - "Error handling and retry logic"
  
  notification_system:
    description: "Multi-channel notification and alerting system"
    variables:
      workflow_type: "automation"
      automation_triggers: ["webhook", "schedule"]
      real_time_processing: true
      complexity_level: "medium"
    features:
      - "Event-driven notifications"
      - "Multi-channel delivery (email, SMS, push)"
      - "Template management"
      - "Delivery tracking and analytics"
      - "Escalation and retry logic"

usage:
  description: "Complete guide for building backend workflows with BuildShip"
  setup_steps:
    - "Create BuildShip account and workspace"
    - "Design workflow architecture and data flow"
    - "Build workflows using visual node editor"
    - "Configure data sources and integrations"
    - "Set up triggers and automation rules"
    - "Add custom code nodes if needed"
    - "Test workflows with sample data"
    - "Deploy and monitor workflow performance"
  development_workflow:
    - "Plan workflow logic and data requirements"
    - "Create workflows incrementally"
    - "Test each node and connection"
    - "Implement error handling and validation"
    - "Optimize for performance and cost"
    - "Document workflow purpose and logic"

best_practices:
  workflow_design:
    - "Keep workflows modular and reusable"
    - "Use descriptive names for nodes and workflows"
    - "Implement proper error handling at each step"
    - "Plan for scalability and performance"
    - "Document complex logic and decisions"
  performance:
    - "Optimize data processing and transformations"
    - "Use efficient database queries"
    - "Implement caching where appropriate"
    - "Monitor execution times and costs"
    - "Use batch processing for large datasets"
  security:
    - "Secure API endpoints with authentication"
    - "Validate all input data"
    - "Use environment variables for sensitive data"
    - "Implement proper access controls"
    - "Regular security audits and updates"
  maintenance:
    - "Monitor workflow performance and errors"
    - "Keep integrations and dependencies updated"
    - "Implement logging and debugging"
    - "Plan for backup and disaster recovery"

limitations:
  technical:
    - "Limited advanced programming constructs"
    - "Dependency on BuildShip platform availability"
    - "Learning curve for complex workflow design"
    - "Limited debugging and troubleshooting tools"
  business:
    - "Execution-based pricing can become expensive"
    - "Newer platform with limited track record"
    - "Smaller community and ecosystem"
  integration:
    - "Limited pre-built integrations compared to Zapier"
    - "May require custom code for complex integrations"
    - "API rate limits from third-party services"

dependencies:
  required:
    - "BuildShip account with appropriate plan"
    - "Understanding of workflow design principles"
    - "Access to required data sources and APIs"
  optional:
    - "JavaScript knowledge for custom code nodes"
    - "Database management skills"
    - "API development experience"
    - "Monitoring and analytics tools"

examples:
  ecommerce_order_processing:
    description: "Automated order fulfillment and customer communication"
    workflow_steps:
      - "Receive order webhook from e-commerce platform"
      - "Validate order data and inventory availability"
      - "Create fulfillment tasks in warehouse system"
      - "Send order confirmation email to customer"
      - "Update inventory levels in database"
      - "Schedule follow-up communications"
    complexity: "medium"
    estimated_executions: "1000-5000/month"
    estimated_setup: "1-2 weeks"
  
  content_moderation_system:
    description: "Automated content review and moderation pipeline"
    workflow_steps:
      - "Receive content submission via API"
      - "Run AI-powered content analysis"
      - "Check against moderation rules and policies"
      - "Route flagged content to human reviewers"
      - "Update content status and notify users"
      - "Generate moderation reports and analytics"
    complexity: "complex"
    estimated_executions: "5000-20000/month"
    estimated_setup: "3-4 weeks"
  
  lead_scoring_automation:
    description: "Automated lead qualification and scoring system"
    workflow_steps:
      - "Receive lead data from multiple sources"
      - "Enrich lead information with external data"
      - "Calculate lead score based on criteria"
      - "Route qualified leads to sales team"
      - "Update CRM with lead information"
      - "Trigger follow-up sequences"
    complexity: "medium"
    estimated_executions: "2000-8000/month"
    estimated_setup: "2-3 weeks"
