name: "Supabase Backend-as-a-Service Template"
description: "Open-source Firebase alternative with PostgreSQL database, real-time features, and authentication"
category: "no_code_platform"
platforms: ["supabase"]
version: "1.0.0"
file_extension: "sql"

platform_info:
  name: "Supabase"
  type: "backend_as_service"
  tier: "tier_3"
  target_audience: "developers, full-stack applications, startups, open-source projects"
  pricing:
    free_tier: "500MB database, 50MB file storage, 2GB bandwidth"
    pro: "$25/month - 8GB database, 100GB storage, 250GB bandwidth"
    team: "$599/month - team features, point-in-time recovery"
    enterprise: "Custom pricing - dedicated support, SLA"
  key_features:
    - "PostgreSQL database with real-time subscriptions"
    - "Built-in authentication and authorization"
    - "Auto-generated REST and GraphQL APIs"
    - "File storage with CDN"
    - "Edge functions (serverless)"
    - "Real-time collaboration features"
    - "Row Level Security (RLS)"
    - "Database migrations and versioning"
  limitations:
    - "Requires technical knowledge for advanced features"
    - "Limited visual interface compared to other no-code tools"
    - "PostgreSQL-only database option"
    - "Newer platform with evolving feature set"

variables:
  application_type:
    type: "string"
    required: true
    description: "Type of application backend"
    examples: ["web_app", "mobile_app", "saas_platform", "api_service", "real_time_app"]

  authentication_method:
    type: "array"
    default: ["email_password"]
    description: "Authentication methods to implement"
    examples: [["email_password"], ["email_password", "oauth"], ["email_password", "oauth", "magic_link"]]

  real_time_features:
    type: "boolean"
    default: false
    description: "Enable real-time subscriptions and updates"

  file_storage:
    type: "boolean"
    default: false
    description: "Enable file storage and management"

  edge_functions:
    type: "boolean"
    default: false
    description: "Use edge functions for serverless logic"

  database_complexity:
    type: "string"
    default: "medium"
    description: "Database schema complexity"
    examples: ["simple", "medium", "complex", "enterprise"]

variants:
  real_time_chat_app:
    description: "Real-time messaging application with user management"
    variables:
      application_type: "real_time_app"
      authentication_method: ["email_password", "oauth"]
      real_time_features: true
      file_storage: true
    features:
      - "User authentication and profiles"
      - "Real-time message delivery"
      - "File and image sharing"
      - "Chat room management"
      - "Message history and search"
      - "Push notifications"

  saas_application:
    description: "Multi-tenant SaaS platform with subscription management"
    variables:
      application_type: "saas_platform"
      authentication_method: ["email_password", "oauth"]
      edge_functions: true
      database_complexity: "complex"
    features:
      - "Multi-tenant architecture"
      - "Subscription and billing management"
      - "Role-based access control"
      - "API rate limiting"
      - "Analytics and reporting"
      - "Webhook integrations"

  content_management_system:
    description: "Headless CMS with content delivery and management"
    variables:
      application_type: "web_app"
      authentication_method: ["email_password"]
      file_storage: true
      database_complexity: "medium"
    features:
      - "Content creation and editing"
      - "Media asset management"
      - "Content versioning"
      - "API-driven content delivery"
      - "SEO optimization"
      - "Multi-language support"

usage:
  description: "Complete guide for building backend services with Supabase"
  setup_steps:
    - "Create Supabase project and configure settings"
    - "Design database schema and relationships"
    - "Set up Row Level Security (RLS) policies"
    - "Configure authentication providers"
    - "Create API endpoints and functions"
    - "Set up real-time subscriptions if needed"
    - "Configure file storage buckets"
    - "Deploy edge functions for custom logic"
    - "Test API endpoints and security"
  development_workflow:
    - "Plan database schema and relationships"
    - "Implement authentication and authorization"
    - "Create API endpoints and business logic"
    - "Add real-time features if needed"
    - "Implement file storage and management"
    - "Test and optimize performance"

best_practices:
  database_design:
    - "Use PostgreSQL best practices for schema design"
    - "Implement proper indexing for performance"
    - "Use Row Level Security for data protection"
    - "Plan for scalability and growth"
    - "Use database functions for complex logic"
  security:
    - "Implement comprehensive RLS policies"
    - "Use environment variables for sensitive data"
    - "Validate all input data"
    - "Implement proper authentication flows"
    - "Regular security audits and updates"
  performance:
    - "Optimize database queries and indexes"
    - "Use connection pooling for high traffic"
    - "Implement caching strategies"
    - "Monitor database performance metrics"
    - "Use edge functions for compute-heavy tasks"
  development:
    - "Use migrations for database changes"
    - "Implement proper error handling"
    - "Write comprehensive tests"
    - "Document API endpoints and schemas"
    - "Use TypeScript for type safety"

limitations:
  technical:
    - "Requires SQL and database knowledge"
    - "Limited to PostgreSQL database"
    - "Learning curve for advanced features"
    - "Real-time features can be complex to implement"
  business:
    - "Newer platform with evolving features"
    - "Limited enterprise features compared to AWS/GCP"
    - "Dependency on Supabase infrastructure"
  development:
    - "Less visual interface compared to other no-code tools"
    - "Requires understanding of backend concepts"
    - "Limited third-party integrations"

dependencies:
  required:
    - "Supabase account and project"
    - "Basic SQL and database knowledge"
    - "Understanding of REST APIs"
  optional:
    - "JavaScript/TypeScript for edge functions"
    - "Frontend framework for client application"
    - "CI/CD pipeline for deployment"
    - "Monitoring and analytics tools"

examples:
  task_management_app:
    description: "Collaborative task management with real-time updates"
    database_tables:
      - "users (authentication and profiles)"
      - "projects (project information and settings)"
      - "tasks (task details and assignments)"
      - "comments (task discussions)"
      - "attachments (file uploads)"
    features:
      - "User authentication and team management"
      - "Real-time task updates and notifications"
      - "File attachment and sharing"
      - "Project collaboration and permissions"
      - "Activity tracking and reporting"
    complexity: "medium"
    estimated_setup: "2-3 weeks"

  ecommerce_backend:
    description: "E-commerce platform backend with inventory and orders"
    database_tables:
      - "users (customer accounts)"
      - "products (product catalog)"
      - "categories (product organization)"
      - "orders (purchase transactions)"
      - "inventory (stock management)"
    features:
      - "Product catalog management"
      - "Shopping cart and checkout"
      - "Order processing and fulfillment"
      - "Inventory tracking and alerts"
      - "Customer account management"
      - "Payment integration webhooks"
    complexity: "high"
    estimated_setup: "4-6 weeks"

  social_media_platform:
    description: "Social networking platform with feeds and interactions"
    database_tables:
      - "users (user profiles and settings)"
      - "posts (content and media)"
      - "comments (post interactions)"
      - "likes (engagement tracking)"
      - "follows (user relationships)"
    features:
      - "User profiles and authentication"
      - "Real-time activity feeds"
      - "Content creation and sharing"
      - "Social interactions and engagement"
      - "Media storage and processing"
      - "Notification system"
    complexity: "high"
    estimated_setup: "5-8 weeks"
