name: "Lovable Vibe Coding Template"
description: "#5 Best vibe coding tool for fast, prompt-based programming - Single-prompt development with AI error suggestions"
category: "vibe_coding_platform"
platforms: ["lovable"]
file_extension: "md"

platform_info:
  name: "Lovable"
  type: "vibe_coding_platform"
  ranking: "#5 Best Vibe Coding Tool for Fast Development (Cybernews 2025)"
  vibe_coding_approach: "Single-prompt development with chat interface and AI error suggestions"
  pricing:
    free: "5 messages per day for public projects"
    pro: "$25/month - 100 additional monthly messages and private projects"
    teams: "$30/month - Team collaboration features"
    enterprise: "Custom pricing for organizations"
  key_features:
    - "Single-prompt web app development"
    - "Chat interface for conversational coding"
    - "AI error suggestions and automatic fixes"
    - "Pre-configured services (forms, logins, CMS)"
    - "Real-time editing and collaboration"
    - "Figma design import capabilities"
    - "Built-in Supabase database integration"
    - "GitHub sync with full code ownership"
    - "Frontend and backend management"
  
  vibe_coding_specialization:
    - "Fastest development cycle in vibe coding"
    - "Minimal manual input required"
    - "Well-trained on common web app patterns"
    - "Optimized for dashboards, CRMs, and landing pages"
    - "Reduces setup and development friction"
    - "Built-in services eliminate configuration overhead"

variables:
  app_name:
    type: "string"
    required: true
    description: "Name of your web application"
    examples: ["EcommerceStore", "ProjectManager", "SocialFeed"]
  
  app_description:
    type: "string"
    required: true
    description: "Detailed description of your app's functionality"
    examples: 
      - "A project management tool with kanban boards, team collaboration, and time tracking"
      - "An e-commerce platform with product catalog, shopping cart, and payment processing"
  
  design_source:
    type: "string"
    default: "ai_generated"
    description: "Source of the app's design"
    examples: ["ai_generated", "figma_import", "custom_description"]
  
  figma_url:
    type: "string"
    required: false
    description: "Figma design URL (if importing from Figma)"
    examples: ["https://www.figma.com/file/abc123/MyAppDesign"]
  
  database_needs:
    type: "array"
    required: true
    description: "Types of data your app will manage"
    examples: 
      - ["users", "projects", "tasks", "comments"]
      - ["products", "orders", "customers", "inventory"]
  
  authentication_type:
    type: "string"
    default: "email_password"
    description: "User authentication method"
    examples: ["email_password", "social_login", "magic_link", "none"]

variants:
  with_github_sync:
    name: "With GitHub Integration"
    description: "Enables GitHub repository sync and code ownership"
    modifications:
      - line: 15
        action: "add_after"
        content: "- GitHub repository creation and sync\n- Full source code access and ownership\n- Version control and collaboration\n- Custom deployment options"
  
  with_advanced_database:
    name: "With Advanced Database Features"
    description: "Includes complex database relationships and real-time features"
    modifications:
      - line: 20
        action: "add_after"
        content: "- Complex database relationships\n- Real-time data synchronization\n- Advanced querying capabilities\n- Data validation and constraints"
  
  with_payments:
    name: "With Payment Integration"
    description: "Includes Stripe payment processing capabilities"
    modifications:
      - line: 25
        action: "add_after"
        content: "- Stripe payment gateway integration\n- Subscription management\n- Invoice generation\n- Payment history tracking"

usage:
  - "Rapid MVP development for startups"
  - "Converting Figma designs to functional apps"
  - "Building SaaS products with database backends"
  - "Creating web apps with code ownership requirements"
  - "Prototyping complex web applications"

development_approach:
  method: "ai_prompt_driven"
  description: "Describe your app using natural language, optionally import Figma designs"
  steps:
    - "Define your app concept and core functionality"
    - "Import Figma designs or describe visual requirements"
    - "Specify database structure and relationships"
    - "Use natural language prompts to build features"
    - "Iterate with AI feedback and refinements"
    - "Sync to GitHub for code ownership"
    - "Deploy and test your application"

prompt_engineering_best_practices:
  structure:
    - "Start with clear app overview and purpose"
    - "Break down complex features into smaller requests"
    - "Be specific about user interactions and workflows"
    - "Describe data relationships and business logic"
  
  examples:
    basic_request: |
      "Create a task management app where users can:
      - Create projects with titles and descriptions
      - Add tasks to projects with due dates and priorities
      - Mark tasks as complete
      - Filter tasks by status and priority"
    
    detailed_request: |
      "Build an e-commerce product page that includes:
      - Product image gallery with zoom functionality
      - Product details (name, price, description, specifications)
      - Quantity selector and add to cart button
      - Customer reviews section with star ratings
      - Related products carousel at the bottom"

figma_integration:
  supported_features:
    - "Component import and conversion"
    - "Layout and styling preservation"
    - "Interactive element identification"
    - "Responsive design adaptation"
  
  best_practices:
    - "Use consistent naming conventions in Figma"
    - "Organize components and frames clearly"
    - "Include interaction prototypes when possible"
    - "Provide clear annotations for dynamic content"

database_design_patterns:
  user_management:
    tables: ["users", "profiles", "sessions"]
    relationships: "One-to-one between users and profiles"
  
  content_management:
    tables: ["posts", "categories", "tags", "post_tags"]
    relationships: "Many-to-many between posts and tags"
  
  ecommerce:
    tables: ["products", "orders", "order_items", "customers"]
    relationships: "One-to-many from orders to order_items"

dependencies:
  required:
    - "Lovable account and subscription"
    - "Clear app requirements and user stories"
    - "Database structure planning"
  
  optional:
    - "Figma designs for visual reference"
    - "GitHub account for code ownership"
    - "Custom domain for deployment"
    - "Stripe account for payment processing"

best_practices:
  prompting:
    - "Be specific about functionality and user experience"
    - "Provide examples of similar apps or features"
    - "Iterate in small, focused requests"
    - "Test each feature before adding complexity"
  
  design:
    - "Start with core functionality before visual polish"
    - "Consider mobile responsiveness from the beginning"
    - "Use consistent design patterns throughout"
    - "Plan for different user states and error handling"
  
  database:
    - "Design your data structure before building"
    - "Consider data relationships and constraints"
    - "Plan for data validation and security"
    - "Think about scalability and performance"

limitations:
  - "Monthly message limits on AI interactions"
  - "Complex backend logic may require multiple iterations"
  - "Limited to web applications (no native mobile)"
  - "AI may misunderstand complex requirements"
  - "Requires internet connection for development"

examples:
  project_management:
    name: "Team Project Manager"
    description: "Collaborative project management with kanban boards"
    variables:
      app_name: "TeamFlow"
      app_description: "A project management app with kanban boards, team member assignment, task dependencies, time tracking, and project analytics dashboard"
      design_source: "ai_generated"
      database_needs: ["users", "projects", "tasks", "comments", "time_entries"]
      authentication_type: "email_password"
    variants: ["with_github_sync", "with_advanced_database"]
    prompt_example: |
      "Create a project management app where teams can:
      - Create projects with team member invitations
      - Use kanban boards with customizable columns
      - Assign tasks to team members with due dates
      - Track time spent on tasks
      - View project analytics and progress reports
      - Comment on tasks and receive notifications"
  
  ecommerce_store:
    name: "Online Store Platform"
    description: "E-commerce platform with product management and payments"
    variables:
      app_name: "ShopEasy"
      app_description: "An e-commerce platform with product catalog, shopping cart, order management, customer accounts, and payment processing"
      design_source: "figma_import"
      figma_url: "https://www.figma.com/file/example/ecommerce-design"
      database_needs: ["products", "categories", "orders", "customers", "cart_items"]
      authentication_type: "email_password"
    variants: ["with_github_sync", "with_payments", "with_advanced_database"]
    prompt_example: |
      "Build an e-commerce store that includes:
      - Product catalog with categories and search
      - Shopping cart with quantity management
      - Customer registration and login
      - Order checkout with shipping information
      - Admin panel for product and order management
      - Stripe payment integration for secure transactions"
  
  social_platform:
    name: "Community Social App"
    description: "Social platform with user-generated content and interactions"
    variables:
      app_name: "CommunityHub"
      app_description: "A social platform where users can create posts, follow other users, like and comment on content, and join interest-based groups"
      design_source: "ai_generated"
      database_needs: ["users", "posts", "comments", "likes", "follows", "groups"]
      authentication_type: "social_login"
    variants: ["with_github_sync", "with_advanced_database"]
    prompt_example: |
      "Create a social platform where users can:
      - Register and create detailed profiles
      - Post text, images, and links
      - Follow other users and see their posts in a feed
      - Like and comment on posts
      - Join groups based on interests
      - Receive notifications for interactions"
