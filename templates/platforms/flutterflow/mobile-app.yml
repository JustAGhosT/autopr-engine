name: "FlutterFlow Mobile App Template"
description: "Professional Flutter app development with visual builder and code export"
category: "no_code_platform"
platforms: ["flutterflow"]
file_extension: "md"

platform_info:
  name: "FlutterFlow"
  type: "mobile_focused"
  pricing:
    free: "Limited projects with FlutterFlow branding"
    standard: "$30/month - Remove branding, code export, custom functions"
    pro: "$70/month - Team collaboration, advanced integrations"
    team: "$70/month per user - Team features and shared workspaces"
  key_features:
    - "Flutter-based cross-platform development"
    - "Visual UI builder with real-time preview"
    - "Full Flutter code export and ownership"
    - "Firebase integration and backend services"
    - "Custom code and function support"
    - "App store deployment assistance"

variables:
  app_name:
    type: "string"
    required: true
    description: "Name of your Flutter mobile application"
    examples: ["EcommerceApp", "ChatMessenger", "TaskManager"]

  app_description:
    type: "string"
    required: true
    description: "Detailed description of your app's functionality"
    examples:
      - "A real-time chat application with group messaging, file sharing, and video calls"
      - "An e-commerce app with product browsing, cart management, and secure payments"

  target_platforms:
    type: "array"
    default: ["ios", "android"]
    description: "Target mobile platforms"
    examples: [["ios"], ["android"], ["ios", "android"], ["web"]]

  app_theme:
    type: "string"
    default: "material"
    description: "App design theme and styling approach"
    examples: ["material", "cupertino", "custom"]

  backend_service:
    type: "string"
    default: "firebase"
    description: "Backend service provider"
    examples: ["firebase", "supabase", "custom_api", "none"]

  authentication_type:
    type: "string"
    default: "email_password"
    description: "User authentication method"
    examples: ["email_password", "phone_auth", "social_login", "anonymous", "none"]

  database_type:
    type: "string"
    default: "firestore"
    description: "Database solution"
    examples: ["firestore", "realtime_database", "supabase", "sqlite", "custom"]

  state_management:
    type: "string"
    default: "provider"
    description: "State management approach"
    examples: ["provider", "riverpod", "bloc", "getx"]

  required_features:
    type: "array"
    default: []
    description: "Core features needed in the app"
    examples: [["chat", "notifications"], ["payments", "analytics"], ["maps", "camera"]]

variants:
  with_advanced_animations:
    name: "With Advanced Animations"
    description: "Includes complex animations and micro-interactions"
    modifications:
      - line: 15
        action: "add_after"
        content:
          "- Custom animation controllers and transitions\n- Lottie animation integration\n- Hero
          animations and shared element transitions\n- Interactive gesture-based animations"

  with_ai_ml:
    name: "With AI/ML Features"
    description: "Includes TensorFlow Lite and ML Kit integrations"
    modifications:
      - line: 20
        action: "add_after"
        content:
          "- TensorFlow Lite model integration\n- ML Kit for text recognition and translation\n-
          Custom AI model deployment\n- On-device machine learning capabilities"

  with_custom_backend:
    name: "With Custom Backend Integration"
    description: "Includes custom API and backend service integration"
    modifications:
      - line: 25
        action: "add_after"
        content:
          "- Custom REST API integration\n- GraphQL client implementation\n- WebSocket real-time
          communication\n- Custom authentication and authorization"

usage:
  - "Professional mobile app development"
  - "Flutter learning and prototyping"
  - "Cross-platform app deployment"
  - "Rapid MVP development with code ownership"
  - "Enterprise mobile solutions"

development_approach:
  method: "visual_flutter_builder"
  description: "Build Flutter apps visually with full code export capabilities"
  steps:
    - "Design app structure and navigation flow"
    - "Create UI layouts using drag-and-drop widgets"
    - "Configure backend services and data models"
    - "Implement business logic with actions and custom functions"
    - "Add animations and interactions"
    - "Test using real-time preview and device testing"
    - "Export Flutter code or deploy directly"

widget_categories:
  layout:
    - "Container, Row, Column, Stack"
    - "ListView, GridView, PageView"
    - "Scaffold, AppBar, BottomNavigationBar"
    - "Drawer, TabBar, SliverAppBar"

  input:
    - "TextField, TextFormField"
    - "ElevatedButton, TextButton, IconButton"
    - "Checkbox, Radio, Switch"
    - "Slider, DropdownButton, DatePicker"

  display:
    - "Text, RichText, Image"
    - "Card, ListTile, ExpansionTile"
    - "CircularProgressIndicator, LinearProgressIndicator"
    - "Icon, Avatar, Chip"

  navigation:
    - "Navigator, Route, PageRoute"
    - "BottomNavigationBar, TabBar"
    - "Drawer, EndDrawer"
    - "BackButton, PopupMenuButton"

  custom:
    - "Custom widgets and components"
    - "Third-party package integrations"
    - "Platform-specific implementations"
    - "Custom painters and animations"

firebase_integration:
  authentication:
    methods: ["Email/Password", "Phone", "Google", "Apple", "Facebook", "Anonymous"]
    setup: "Configure Firebase Auth in project settings"
    features: ["User management", "Password reset", "Email verification"]

  firestore:
    features: ["Real-time database", "Offline support", "Security rules"]
    operations: ["CRUD operations", "Real-time listeners", "Batch operations"]
    best_practices: ["Data modeling", "Security rules", "Performance optimization"]

  storage:
    features: ["File upload/download", "Image optimization", "Security rules"]
    use_cases: ["Profile pictures", "Document storage", "Media files"]

  cloud_functions:
    features: ["Server-side logic", "Triggers", "HTTP endpoints"]
    use_cases: ["Payment processing", "Email sending", "Data validation"]

custom_code_integration:
  custom_functions:
    description: "Write Dart code for complex business logic"
    use_cases: ["Data processing", "API integrations", "Complex calculations"]
    best_practices: ["Type safety", "Error handling", "Performance optimization"]

  custom_widgets:
    description: "Create reusable custom Flutter widgets"
    use_cases: ["Complex UI components", "Third-party integrations", "Platform-specific features"]

  packages:
    description: "Integrate Flutter packages and dependencies"
    popular_packages: ["http", "provider", "shared_preferences", "image_picker", "geolocator"]

testing_strategies:
  preview_mode:
    description: "Real-time preview during development"
    benefits: ["Immediate feedback", "Live editing", "Multi-device preview"]

  test_mode:
    description: "Test app on actual devices"
    setup: "Install FlutterFlow app and scan QR code"
    benefits: ["Real device performance", "Native feature testing", "User experience validation"]

  code_export_testing:
    description: "Export code and test in Flutter development environment"
    benefits: ["Full debugging capabilities", "Performance profiling", "Custom testing frameworks"]

deployment_options:
  flutterflow_deployment:
    description: "Deploy directly from FlutterFlow platform"
    platforms: ["iOS App Store", "Google Play Store", "Web hosting"]
    benefits: ["Simplified process", "Automated builds", "Store submission assistance"]

  code_export_deployment:
    description: "Export Flutter code and deploy independently"
    benefits: ["Full control", "Custom CI/CD", "Advanced configurations"]
    requirements: ["Flutter development environment", "Platform-specific setup"]

dependencies:
  required:
    - "FlutterFlow account and subscription"
    - "Clear app requirements and user flows"
    - "Firebase project (if using Firebase backend)"

  optional:
    - "Custom API endpoints and documentation"
    - "Design assets and branding guidelines"
    - "Apple/Google developer accounts for publishing"
    - "Third-party service accounts (Stripe, etc.)"

best_practices:
  development:
    - "Plan your data structure and user flows first"
    - "Use consistent naming conventions for pages and components"
    - "Leverage FlutterFlow's component system for reusability"
    - "Test frequently on real devices"
    - "Implement proper error handling and loading states"

  design:
    - "Follow Material Design or Cupertino guidelines"
    - "Maintain consistent spacing and typography"
    - "Design for multiple screen sizes and orientations"
    - "Use appropriate color contrast for accessibility"

  performance:
    - "Optimize image sizes and formats"
    - "Use efficient list rendering for large datasets"
    - "Implement proper state management"
    - "Monitor app performance and memory usage"

  code_export:
    - "Review exported code for optimization opportunities"
    - "Add comprehensive comments and documentation"
    - "Implement proper version control practices"
    - "Set up continuous integration and deployment"

limitations:
  - "Learning curve for Flutter-specific concepts"
  - "Limited compared to full Flutter development flexibility"
  - "Subscription required for advanced features and code export"
  - "Complex animations may require custom code"
  - "Performance optimization may need code-level adjustments"

examples:
  chat_messenger:
    name: "Real-time Chat Messenger"
    description: "Messaging app with real-time communication and media sharing"
    variables:
      app_name: "ChatFlow"
      app_description:
        "A real-time messaging app with group chats, file sharing, push notifications, and user
        presence indicators"
      target_platforms: ["ios", "android"]
      app_theme: "material"
      backend_service: "firebase"
      authentication_type: "phone_auth"
      database_type: "firestore"
      state_management: "provider"
      required_features: ["chat", "notifications", "file_sharing", "user_presence"]
    variants: ["with_advanced_animations", "with_ai_ml"]
    key_features:
      - "Real-time message synchronization with Firestore"
      - "Group chat creation and management"
      - "Image and file sharing with Firebase Storage"
      - "Push notifications for new messages"
      - "User online/offline status indicators"
      - "Message read receipts and typing indicators"

  ecommerce_app:
    name: "E-commerce Shopping App"
    description: "Full-featured shopping app with cart and payment processing"
    variables:
      app_name: "ShopFlutter"
      app_description:
        "A comprehensive e-commerce app with product browsing, cart management, secure payments,
        order tracking, and user reviews"
      target_platforms: ["ios", "android", "web"]
      app_theme: "material"
      backend_service: "firebase"
      authentication_type: "email_password"
      database_type: "firestore"
      state_management: "riverpod"
      required_features: ["shopping_cart", "payments", "search", "reviews"]
    variants: ["with_custom_backend", "with_advanced_animations"]
    key_features:
      - "Product catalog with categories and search"
      - "Shopping cart with quantity management"
      - "Stripe payment integration"
      - "Order history and tracking"
      - "Product reviews and ratings"
      - "Wishlist and favorites functionality"

  task_manager:
    name: "Productivity Task Manager"
    description: "Task management app with team collaboration features"
    variables:
      app_name: "TaskFlow Pro"
      app_description:
        "A productivity app for task management with project organization, team collaboration,
        deadline tracking, and progress analytics"
      target_platforms: ["ios", "android"]
      app_theme: "cupertino"
      backend_service: "supabase"
      authentication_type: "email_password"
      database_type: "supabase"
      state_management: "bloc"
      required_features: ["tasks", "projects", "collaboration", "analytics"]
    variants: ["with_advanced_animations", "with_custom_backend"]
    key_features:
      - "Project and task organization with categories"
      - "Team member assignment and collaboration"
      - "Deadline tracking with notifications"
      - "Progress analytics and reporting"
      - "File attachments and comments"
      - "Kanban board and list views"
