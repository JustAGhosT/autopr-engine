name: "Replit Collaborative Development Template"
description: "Multi-language collaborative development platform with AI assistance and real-time collaboration"
category: "no_code_platform"
platforms: ["replit"]
file_extension: "md"

platform_info:
  name: "Replit"
  type: "developer_friendly"
  pricing:
    free: "Basic use and learning with resource limitations"
    hacker: "$20/month - Additional resources and features"
    pro: "$35/month per user - Team collaboration"
    enterprise: "Custom pricing for organizations"
  key_features:
    - "AI tools for code generation and debugging"
    - "Real-time collaboration with live editing"
    - "One-click publishing and deployment"
    - "Support for 30+ programming languages"
    - "Integrated development environment in browser"

variables:
  app_name:
    type: "string"
    required: true
    description: "Name of your application project"
    examples: ["TaskTracker", "BlogEngine", "APIService"]
  
  primary_language:
    type: "string"
    default: "javascript"
    description: "Primary programming language for the project"
    examples: ["javascript", "python", "java", "cpp", "go", "rust", "typescript"]
  
  app_type:
    type: "string"
    required: true
    description: "Type of application you're building"
    examples: ["web_app", "api_service", "cli_tool", "game", "data_analysis", "bot"]
  
  framework:
    type: "string"
    default: "express"
    description: "Framework or library to use (language-dependent)"
    examples: ["express", "react", "vue", "django", "flask", "spring", "gin"]
  
  collaboration_type:
    type: "string"
    default: "solo"
    description: "Type of collaboration needed"
    examples: ["solo", "pair_programming", "team_project", "open_source"]

variants:
  with_database:
    name: "With Database Integration"
    description: "Includes database setup and ORM configuration"
    modifications:
      - line: 15
        action: "add_after"
        content: "- Database integration (SQLite, PostgreSQL, MongoDB)\n- ORM/ODM setup and configuration\n- Database migration scripts"
  
  with_ai_assistance:
    name: "With Enhanced AI Features"
    description: "Leverages Replit's AI for code generation and debugging"
    modifications:
      - line: 20
        action: "add_after"
        content: "- AI-powered code completion\n- Automated debugging assistance\n- Code explanation and documentation\n- Refactoring suggestions"
  
  with_deployment:
    name: "With Production Deployment"
    description: "Includes production deployment configuration"
    modifications:
      - line: 25
        action: "add_after"
        content: "- Production environment setup\n- Environment variable management\n- Custom domain configuration\n- SSL certificate setup"

usage:
  - "Rapid prototyping and MVP development"
  - "Educational projects and coding bootcamps"
  - "Team collaboration on coding projects"
  - "Open source project development"
  - "API development and microservices"

development_approach:
  method: "collaborative_coding"
  description: "Real-time collaborative development with AI assistance"
  steps:
    - "Create new Repl with chosen language and framework"
    - "Set up project structure and dependencies"
    - "Use AI assistance for code generation and debugging"
    - "Collaborate in real-time with team members"
    - "Test and iterate using integrated tools"
    - "Deploy with one-click publishing"

language_specific_configs:
  javascript:
    frameworks: ["express", "react", "vue", "next", "nuxt"]
    package_manager: "npm"
    entry_point: "index.js"
    common_dependencies: ["express", "cors", "dotenv", "nodemon"]
  
  python:
    frameworks: ["django", "flask", "fastapi", "streamlit"]
    package_manager: "pip"
    entry_point: "main.py"
    common_dependencies: ["flask", "requests", "python-dotenv"]
  
  java:
    frameworks: ["spring", "spark", "vertx"]
    package_manager: "maven"
    entry_point: "Main.java"
    common_dependencies: ["spring-boot-starter-web", "jackson-databind"]

ai_assistance_features:
  code_generation:
    - "Generate functions from natural language descriptions"
    - "Create boilerplate code for common patterns"
    - "Implement algorithms and data structures"
  
  debugging:
    - "Identify and explain errors"
    - "Suggest fixes for common issues"
    - "Optimize code performance"
  
  documentation:
    - "Generate code comments and docstrings"
    - "Create README files and documentation"
    - "Explain complex code sections"

collaboration_features:
  real_time_editing:
    - "Multiple cursors and simultaneous editing"
    - "Live code sharing and review"
    - "Integrated chat and voice communication"
  
  version_control:
    - "Built-in Git integration"
    - "Branch management and merging"
    - "Commit history and rollback"

dependencies:
  required:
    - "Replit account and appropriate subscription"
    - "Basic programming knowledge in chosen language"
    - "Project requirements and specifications"
  
  optional:
    - "Custom domain for deployment"
    - "External database services"
    - "Third-party API keys and integrations"

best_practices:
  development:
    - "Start with simple functionality and iterate"
    - "Use AI assistance for learning and productivity"
    - "Leverage real-time collaboration for code reviews"
    - "Keep dependencies minimal and up-to-date"
  
  collaboration:
    - "Establish coding standards and conventions"
    - "Use meaningful commit messages"
    - "Communicate changes through integrated chat"
    - "Regular code reviews and pair programming"
  
  deployment:
    - "Test thoroughly before publishing"
    - "Use environment variables for configuration"
    - "Monitor application performance and logs"
    - "Set up proper error handling and logging"

limitations:
  - "Requires coding knowledge unlike pure no-code platforms"
  - "Free tier has resource limitations for larger projects"
  - "Less visual editing capabilities than drag-and-drop builders"
  - "Internet connection required for development"
  - "Limited customization of development environment"

examples:
  express_api:
    name: "Express.js REST API"
    description: "RESTful API service with database integration"
    variables:
      app_name: "TaskAPI"
      primary_language: "javascript"
      app_type: "api_service"
      framework: "express"
      collaboration_type: "team_project"
    variants: ["with_database", "with_deployment"]
    code_structure: |
      - index.js (main server file)
      - routes/ (API endpoints)
      - models/ (data models)
      - middleware/ (custom middleware)
      - package.json (dependencies)
  
  react_dashboard:
    name: "React Analytics Dashboard"
    description: "Interactive dashboard with data visualization"
    variables:
      app_name: "AnalyticsDash"
      primary_language: "javascript"
      app_type: "web_app"
      framework: "react"
      collaboration_type: "pair_programming"
    variants: ["with_ai_assistance", "with_deployment"]
    code_structure: |
      - src/App.js (main component)
      - src/components/ (React components)
      - src/services/ (API calls)
      - public/ (static assets)
      - package.json (dependencies)
  
  python_ml_service:
    name: "Python Machine Learning Service"
    description: "ML model serving API with data processing"
    variables:
      app_name: "MLPredictor"
      primary_language: "python"
      app_type: "api_service"
      framework: "fastapi"
      collaboration_type: "team_project"
    variants: ["with_database", "with_ai_assistance"]
    code_structure: |
      - main.py (FastAPI application)
      - models/ (ML models and training)
      - data/ (data processing utilities)
      - requirements.txt (Python dependencies)
