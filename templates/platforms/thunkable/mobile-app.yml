name: "Thunkable Mobile App Template"
description: "Cross-platform mobile app development with visual drag-and-drop interface"
category: "no_code_platform"
platforms: ["thunkable"]
file_extension: "md"

platform_info:
  name: "Thunkable"
  type: "mobile_focused"
  pricing:
    free: "Limited projects with Thunkable branding"
    pro: "$25/month - Remove branding, unlimited projects, advanced components"
    team: "$50/month - Team collaboration and sharing features"
    business: "$200/month - White-label apps and priority support"
  key_features:
    - "Cross-platform iOS and Android development"
    - "Visual drag-and-drop interface"
    - "Live testing on device"
    - "Native component access"
    - "Cloud database integration"
    - "App store publishing assistance"

variables:
  app_name:
    type: "string"
    required: true
    description: "Name of your mobile application"
    examples: ["FitnessTracker", "ExpenseManager", "LocalEvents"]

  app_description:
    type: "string"
    required: true
    description: "Detailed description of your app's functionality"
    examples:
      - "A fitness tracking app with workout logging, progress charts, and social sharing"
      - "An expense management app with receipt scanning, budget tracking, and spending analytics"

  target_platforms:
    type: "array"
    default: ["ios", "android"]
    description: "Target mobile platforms"
    examples: [["ios"], ["android"], ["ios", "android"]]

  app_category:
    type: "string"
    required: true
    description: "Primary app category"
    examples:
      ["productivity", "fitness", "finance", "social", "education", "entertainment", "business"]

  data_storage:
    type: "string"
    default: "cloud_database"
    description: "Data storage approach"
    examples: ["local_storage", "cloud_database", "hybrid"]

  authentication_required:
    type: "boolean"
    default: true
    description: "Whether the app requires user authentication"

  offline_functionality:
    type: "boolean"
    default: false
    description: "Whether the app should work offline"

  push_notifications:
    type: "boolean"
    default: false
    description: "Whether the app needs push notifications"

  device_features:
    type: "array"
    default: []
    description: "Native device features to utilize"
    examples: [["camera", "gps"], ["accelerometer", "microphone"], ["bluetooth", "nfc"]]

variants:
  with_advanced_ui:
    name: "With Advanced UI Components"
    description: "Includes advanced UI components like charts, maps, and animations"
    modifications:
      - line: 15
        action: "add_after"
        content:
          "- Advanced chart and graph components\n- Interactive maps integration\n- Smooth
          animations and transitions\n- Custom UI component library"

  with_ai_features:
    name: "With AI Integration"
    description: "Includes AI-powered features like image recognition and text analysis"
    modifications:
      - line: 20
        action: "add_after"
        content:
          "- AI image recognition and classification\n- Natural language processing\n- Machine
          learning model integration\n- Intelligent recommendations"

  with_monetization:
    name: "With Monetization Features"
    description: "Includes in-app purchases and advertising capabilities"
    modifications:
      - line: 25
        action: "add_after"
        content:
          "- In-app purchase integration\n- Advertisement display options\n- Subscription
          management\n- Revenue analytics tracking"

usage:
  - "Rapid mobile app prototyping"
  - "Cross-platform app development without coding"
  - "Educational app development projects"
  - "Small business mobile solutions"
  - "Personal productivity apps"

development_approach:
  method: "visual_drag_drop"
  description: "Build apps using visual components and logic blocks"
  steps:
    - "Design app screens using drag-and-drop components"
    - "Configure component properties and styling"
    - "Create navigation flow between screens"
    - "Add data sources and database connections"
    - "Implement app logic using visual blocks"
    - "Test app using live preview on device"
    - "Publish to app stores"

component_categories:
  layout:
    - "Row and Column containers"
    - "Stack and Scroll views"
    - "Tab and Drawer navigators"
    - "Screen and Modal components"

  input:
    - "Text Input and Text Area"
    - "Button and Icon Button"
    - "Switch and Checkbox"
    - "Slider and Picker components"

  display:
    - "Text and Image components"
    - "List and Grid views"
    - "Chart and Graph components"
    - "Map and WebView components"

  media:
    - "Camera and Image Picker"
    - "Audio Player and Recorder"
    - "Video Player component"
    - "File Upload component"

  data:
    - "Cloud Database (Airtable, Firebase)"
    - "Local Storage variables"
    - "API integration blocks"
    - "Real-time data sync"

design_best_practices:
  user_interface:
    - "Follow platform-specific design guidelines (iOS/Android)"
    - "Maintain consistent color scheme and typography"
    - "Use appropriate spacing and component sizing"
    - "Ensure touch targets are properly sized"

  user_experience:
    - "Design intuitive navigation flows"
    - "Provide clear feedback for user actions"
    - "Handle loading states and error conditions"
    - "Optimize for different screen sizes"

  performance:
    - "Minimize the number of components per screen"
    - "Optimize image sizes and formats"
    - "Use efficient data loading strategies"
    - "Test on various device specifications"

data_integration:
  airtable:
    setup: "Connect Airtable base with API key"
    operations: ["Create", "Read", "Update", "Delete"]
    best_practices: "Structure data with proper field types and relationships"

  firebase:
    setup: "Configure Firebase project with authentication"
    operations: ["Real-time database", "Cloud Firestore", "Authentication"]
    best_practices: "Set up proper security rules and data structure"

  custom_api:
    setup: "Configure API endpoints with proper authentication"
    operations: ["GET", "POST", "PUT", "DELETE requests"]
    best_practices: "Handle API errors and implement retry logic"

testing_strategies:
  live_preview:
    description: "Test app in real-time on your device"
    benefits: ["Immediate feedback", "Real device performance", "Touch interaction testing"]

  thunkable_live:
    description: "Use Thunkable Live app for testing"
    benefits: ["Quick iteration", "No app installation needed", "Easy sharing with testers"]

  device_testing:
    description: "Test on multiple devices and screen sizes"
    considerations:
      ["Performance variations", "Screen size differences", "OS version compatibility"]

publishing_process:
  preparation:
    - "Complete app testing and debugging"
    - "Prepare app store assets (icons, screenshots, descriptions)"
    - "Set up developer accounts (Apple, Google)"
    - "Configure app metadata and privacy settings"

  app_store_requirements:
    ios:
      - "Apple Developer Program membership ($99/year)"
      - "App Store Connect account setup"
      - "App Review Guidelines compliance"
      - "Privacy policy and terms of service"

    android:
      - "Google Play Console account ($25 one-time fee)"
      - "Play Console app setup"
      - "Content rating and target audience"
      - "Privacy policy and permissions declaration"

dependencies:
  required:
    - "Thunkable account and subscription"
    - "Clear app concept and user flow"
    - "Data structure planning"

  optional:
    - "Airtable or Firebase account for data storage"
    - "Custom API endpoints for advanced functionality"
    - "Apple/Google developer accounts for publishing"
    - "Design assets and branding materials"

best_practices:
  development:
    - "Start with a simple MVP and iterate"
    - "Plan your data structure before building"
    - "Use consistent naming conventions for components"
    - "Test frequently on actual devices"
    - "Keep component hierarchy organized and logical"

  design:
    - "Follow platform-specific design patterns"
    - "Ensure accessibility with proper contrast and sizing"
    - "Design for both portrait and landscape orientations"
    - "Consider different screen densities and sizes"

  performance:
    - "Limit the number of components on each screen"
    - "Optimize images and media files"
    - "Use efficient data loading and caching strategies"
    - "Monitor app performance during testing"

limitations:
  - "Limited to visual programming paradigm"
  - "Complex business logic may be challenging to implement"
  - "Performance limitations compared to native development"
  - "Dependency on Thunkable platform and infrastructure"
  - "Limited access to some advanced native features"
  - "App size may be larger than native equivalents"

examples:
  fitness_tracker:
    name: "Personal Fitness Tracker"
    description: "Track workouts, progress, and fitness goals"
    variables:
      app_name: "FitTrack Pro"
      app_description:
        "A comprehensive fitness tracking app with workout logging, progress visualization, goal
        setting, and social sharing features"
      target_platforms: ["ios", "android"]
      app_category: "fitness"
      data_storage: "cloud_database"
      authentication_required: true
      offline_functionality: true
      push_notifications: true
      device_features: ["camera", "gps", "accelerometer"]
    variants: ["with_advanced_ui", "with_ai_features"]
    key_screens:
      - "Dashboard with fitness metrics and progress charts"
      - "Workout logging with exercise library and timer"
      - "Progress tracking with photos and measurements"
      - "Social feed for sharing achievements"
      - "Goal setting and milestone tracking"

  expense_manager:
    name: "Smart Expense Manager"
    description: "Personal finance management with receipt scanning"
    variables:
      app_name: "ExpenseSmart"
      app_description:
        "An intelligent expense management app with receipt scanning, budget tracking, spending
        analytics, and financial goal setting"
      target_platforms: ["ios", "android"]
      app_category: "finance"
      data_storage: "cloud_database"
      authentication_required: true
      offline_functionality: true
      push_notifications: true
      device_features: ["camera", "gps"]
    variants: ["with_ai_features", "with_advanced_ui"]
    key_screens:
      - "Dashboard with spending overview and budget status"
      - "Receipt scanner with AI text extraction"
      - "Expense categorization and tagging"
      - "Budget setup and monitoring"
      - "Analytics and spending reports"

  local_events:
    name: "Local Events Discovery"
    description: "Discover and share local events and activities"
    variables:
      app_name: "EventsNearby"
      app_description:
        "A location-based events discovery app where users can find local events, RSVP, share
        experiences, and create their own events"
      target_platforms: ["ios", "android"]
      app_category: "social"
      data_storage: "cloud_database"
      authentication_required: true
      offline_functionality: false
      push_notifications: true
      device_features: ["gps", "camera"]
    variants: ["with_advanced_ui", "with_monetization"]
    key_screens:
      - "Map view with nearby events and locations"
      - "Event details with photos, descriptions, and RSVP"
      - "User profile with attended events and interests"
      - "Event creation and management tools"
      - "Social feed with event photos and reviews"
