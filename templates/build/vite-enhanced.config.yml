name: "Enhanced Vite Configuration Template"
category: "build"
description: "Optimized Vite configuration with PWA support, performance optimizations, and production features"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["build", "vite", "react", "pwa", "optimization"]

template_info:
  name: "Enhanced Vite Config"
  type: "build_configuration"
  framework: "vite"
  target_audience: "React developers, frontend engineers, performance specialists"
  primary_use_cases: ["React applications", "PWA development", "Performance optimization", "Production builds"]

variables:
  enable_pwa:
    type: "boolean"
    description: "Enable Progressive Web App features"
    default: true
    required: false

  enable_sourcemaps:
    type: "boolean"
    description: "Generate source maps for debugging"
    default: true
    required: false

  server_port:
    type: "number"
    description: "Development server port"
    default: 3000
    required: false

  enable_https:
    type: "boolean"
    description: "Enable HTTPS in development"
    default: false
    required: false

  chunk_optimization:
    type: "boolean"
    description: "Enable manual chunk optimization"
    default: true
    required: false

  enable_compression:
    type: "boolean"
    description: "Enable build compression"
    default: true
    required: false

variants:
  production_optimized:
    description: "Maximum optimization for production deployment"
    variables:
      enable_pwa: true
      enable_sourcemaps: true
      server_port: 3000
      enable_https: false
      chunk_optimization: true
      enable_compression: true

  development_fast:
    description: "Fast development build with minimal optimization"
    variables:
      enable_pwa: false
      enable_sourcemaps: true
      server_port: 3000
      enable_https: false
      chunk_optimization: false
      enable_compression: false

  pwa_focused:
    description: "PWA-optimized configuration with offline support"
    variables:
      enable_pwa: true
      enable_sourcemaps: true
      server_port: 3000
      enable_https: true
      chunk_optimization: true
      enable_compression: true

usage:
  getting_started:
    - "Install required dependencies: npm install vite @vitejs/plugin-react"
    - "Add PWA plugin if enabled: npm install vite-plugin-pwa"
    - "Save configuration as vite.config.ts"
    - "Update package.json scripts to use Vite"
    - "Test development server: npm run dev"
    - "Build for production: npm run build"

  best_practices:
    - "Enable PWA features for better user experience"
    - "Use source maps in development and staging"
    - "Optimize chunk splitting for better caching"
    - "Enable compression for production builds"
    - "Test PWA functionality with Lighthouse"
    - "Monitor bundle size and performance"

  limitations:
    - "PWA features require HTTPS in production"
    - "Large applications may need custom chunk splitting"
    - "Source maps increase build size"
    - "Some plugins may conflict with PWA features"

template: |
  import { defineConfig } from 'vite';
  import react from '@vitejs/plugin-react';
  {% if enable_pwa %}
  import { VitePWA } from 'vite-plugin-pwa';
  {% endif %}
  {% if enable_compression %}
  import { compression } from 'vite-plugin-compression2';
  {% endif %}
  
  export default defineConfig({
    plugins: [
      react(),
      {% if enable_pwa %}
      VitePWA({
        registerType: 'autoUpdate',
        workbox: {
          globPatterns: ['**/*.{js,css,html,ico,png,svg,woff2}'],
          runtimeCaching: [
            {
              urlPattern: /^https:\/\/api\./,
              handler: 'NetworkFirst',
              options: {
                cacheName: 'api-cache',
                expiration: {
                  maxEntries: 100,
                  maxAgeSeconds: 60 * 60 * 24 // 24 hours
                }
              }
            }
          ]
        },
        manifest: {
          name: '{{ app_name | default("My App") }}',
          short_name: '{{ app_name | default("MyApp") }}',
          description: '{{ app_description | default("A Progressive Web App") }}',
          theme_color: '#ffffff',
          background_color: '#ffffff',
          display: 'standalone',
          icons: [
            {
              src: 'pwa-192x192.png',
              sizes: '192x192',
              type: 'image/png'
            },
            {
              src: 'pwa-512x512.png',
              sizes: '512x512',
              type: 'image/png'
            }
          ]
        }
      }),
      {% endif %}
      {% if enable_compression %}
      compression({
        algorithm: 'gzip',
        exclude: [/\.(br)$ /, /\.(gz)$/]
      }),
      {% endif %}
    ],
    build: {
      {% if chunk_optimization %}
      rollupOptions: {
        output: {
          manualChunks: {
            vendor: ['react', 'react-dom'],
            router: ['react-router-dom'],
            ui: ['@mui/material', '@emotion/react', '@emotion/styled']
          }
        }
      },
      {% endif %}
      {% if enable_sourcemaps %}
      sourcemap: true,
      {% endif %}
      target: 'esnext',
      minify: 'terser',
      terserOptions: {
        compress: {
          drop_console: true,
          drop_debugger: true
        }
      },
      chunkSizeWarningLimit: 1000,
      assetsInlineLimit: 4096
    },
    server: {
      port: {{ server_port }},
      host: true,
      {% if enable_https %}
      https: true,
      {% endif %}
      open: true,
      cors: true,
      proxy: {
        '/api': {
          target: 'http://localhost:8080',
          changeOrigin: true,
          secure: false
        }
      }
    },
    preview: {
      port: {{ server_port + 1 }},
      host: true,
      {% if enable_https %}
      https: true,
      {% endif %}
      cors: true
    },
    optimizeDeps: {
      include: ['react', 'react-dom'],
      exclude: ['@vite/client', '@vite/env']
    },
    define: {
      __APP_VERSION__: JSON.stringify(process.env.npm_package_version),
      __BUILD_DATE__: JSON.stringify(new Date().toISOString())
    },
    css: {
      devSourcemap: true,
      preprocessorOptions: {
        scss: {
          additionalData: `@import "src/styles/variables.scss";`
        }
      }
    },
    esbuild: {
      logOverride: { 'this-is-undefined-in-esm': 'silent' }
    }
  });
