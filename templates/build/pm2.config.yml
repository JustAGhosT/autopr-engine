name: "PM2 Process Manager Configuration Template"
category: "build"
description: "PM2 configuration for Node.js application process management, clustering, and monitoring"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["build", "pm2", "process_manager", "node", "clustering"]

template_info:
  name: "PM2 Configuration"
  type: "build_configuration"
  framework: "node"
  target_audience: "Node.js developers, DevOps engineers, production administrators"
  primary_use_cases: ["Process management", "Application clustering", "Production deployment", "Process monitoring"]

variables:
  app_name:
    type: "string"
    description: "Name of the application"
    default: "my-app"
    required: true

  script_path:
    type: "string"
    description: "Path to the main application script"
    default: "dist/index.js"
    required: true

  instances:
    type: "select"
    description: "Number of instances to run"
    options: ["1", "2", "4", "max", "auto"]
    default: "auto"
    required: true

  exec_mode:
    type: "select"
    description: "Execution mode for the application"
    options: ["fork", "cluster"]
    default: "cluster"
    required: true

  node_env:
    type: "select"
    description: "Node environment"
    options: ["development", "production", "staging", "test"]
    default: "production"
    required: true

  max_memory_restart:
    type: "string"
    description: "Restart app if memory usage exceeds this limit"
    default: "1G"
    required: false

  enable_watch:
    type: "boolean"
    description: "Enable file watching for auto-restart"
    default: false
    required: false

  enable_logs:
    type: "boolean"
    description: "Enable PM2 log management"
    default: true
    required: false

  log_rotation:
    type: "boolean"
    description: "Enable automatic log rotation"
    default: true
    required: false

variants:
  production_cluster:
    description: "Production clustering configuration with monitoring"
    variables:
      app_name: "production-app"
      script_path: "dist/server.js"
      instances: "max"
      exec_mode: "cluster"
      node_env: "production"
      max_memory_restart: "2G"
      enable_watch: false
      enable_logs: true
      log_rotation: true

  development_single:
    description: "Development configuration with file watching"
    variables:
      app_name: "dev-app"
      script_path: "src/index.js"
      instances: "1"
      exec_mode: "fork"
      node_env: "development"
      max_memory_restart: "500M"
      enable_watch: true
      enable_logs: true
      log_rotation: false

  staging_balanced:
    description: "Staging environment with balanced resources"
    variables:
      app_name: "staging-app"
      script_path: "dist/app.js"
      instances: "2"
      exec_mode: "cluster"
      node_env: "staging"
      max_memory_restart: "1G"
      enable_watch: false
      enable_logs: true
      log_rotation: true

usage:
  getting_started:
    - "Install PM2 globally: npm install -g pm2"
    - "Save configuration as ecosystem.config.js"
    - "Start application: pm2 start ecosystem.config.js"
    - "Monitor processes: pm2 monit"
    - "View logs: pm2 logs"
    - "Save PM2 configuration: pm2 save"

  best_practices:
    - "Use cluster mode for CPU-intensive applications"
    - "Set appropriate memory limits to prevent crashes"
    - "Enable log rotation to manage disk space"
    - "Use PM2 startup for automatic restart on system reboot"
    - "Monitor application performance with PM2 Plus"
    - "Test configuration in staging before production"

  limitations:
    - "Cluster mode may not work with all applications"
    - "Memory limits should be carefully tuned"
    - "File watching can impact performance in production"
    - "Log files can grow large without rotation"

template: |
  module.exports = {
    apps: [{
      name: '{{ app_name }}',
      script: '{{ script_path }}',
      instances: '{{ instances }}',
      exec_mode: '{{ exec_mode }}',
      env: {
        NODE_ENV: '{{ node_env }}',
        PORT: process.env.PORT || 3000
      },
      {% if max_memory_restart %}
      max_memory_restart: '{{ max_memory_restart }}',
      {% endif %}
      {% if enable_watch %}
      watch: true,
      watch_delay: 1000,
      ignore_watch: ['node_modules', 'logs', '*.log'],
      {% else %}
      watch: false,
      {% endif %}
      {% if enable_logs %}
      log_file: './logs/combined.log',
      out_file: './logs/out.log',
      error_file: './logs/error.log',
      {% if log_rotation %}
      log_date_format: 'YYYY-MM-DD HH:mm:ss Z',
      max_log_size: '10M',
      max_log_files: 5,
      {% endif %}
      {% endif %}
      autorestart: true,
      max_restarts: 10,
      min_uptime: '10s',
      restart_delay: 4000,
      kill_timeout: 5000,
      listen_timeout: 3000,
      shutdown_with_message: true,
      wait_ready: true,
      instance_var: 'INSTANCE_ID',
      merge_logs: true,
      combine_logs: true,
      source_map_support: true,
      disable_source_map_support: false,
      node_args: '--max-old-space-size=4096'
    }],

    deploy: {
      production: {
        user: 'deploy',
        host: ['production-server'],
        ref: 'origin/main',
        repo: 'git@github.com:username/repository.git',
        path: '/var/www/{{ app_name }}',
        'post-deploy': 'npm install && npm run build && pm2 reload ecosystem.config.js --env production',
        env: {
          NODE_ENV: 'production'
        }
      },
      staging: {
        user: 'deploy',
        host: ['staging-server'],
        ref: 'origin/develop',
        repo: 'git@github.com:username/repository.git',
        path: '/var/www/{{ app_name }}-staging',
        'post-deploy': 'npm install && npm run build && pm2 reload ecosystem.config.js --env staging',
        env: {
          NODE_ENV: 'staging'
        }
      }
    }
  };
