name: "CORS Configuration Template"
category: "security"
description: "Cross-Origin Resource Sharing (CORS) configuration for secure API access control"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["security", "cors", "api", "cross_origin", "web_security"]

template_info:
  name: "CORS Security Config"
  type: "security_configuration"
  framework: "express"
  target_audience: "API developers, backend engineers, security engineers"
  primary_use_cases: ["API security", "Cross-origin requests", "Frontend-backend communication", "Third-party integrations"]

variables:
  allowed_origins:
    type: "array"
    description: "List of allowed origins for CORS requests"
    default: ["http://localhost:3000", "http://localhost:3001"]
    required: true

  allowed_methods:
    type: "array"
    description: "HTTP methods allowed for CORS requests"
    default: ["GET", "POST", "PUT", "DELETE", "OPTIONS"]
    required: true

  allowed_headers:
    type: "array"
    description: "Headers allowed in CORS requests"
    default: ["Content-Type", "Authorization", "X-Requested-With"]
    required: true

  credentials:
    type: "boolean"
    description: "Allow credentials (cookies, authorization headers) in CORS requests"
    default: true
    required: false

  max_age:
    type: "number"
    description: "Preflight cache duration in seconds"
    default: 86400
    required: false

  expose_headers:
    type: "array"
    description: "Headers exposed to the client"
    default: ["X-Total-Count", "X-Page-Count"]
    required: false

variants:
  development:
    description: "Permissive CORS for development environments"
    variables:
      allowed_origins: ["http://localhost:3000", "http://localhost:3001", "http://localhost:8080", "http://127.0.0.1:3000"]
      allowed_methods: ["GET", "POST", "PUT", "DELETE", "OPTIONS", "PATCH"]
      allowed_headers: ["*"]
      credentials: true
      max_age: 3600

  production:
    description: "Strict CORS for production environments"
    variables:
      allowed_origins: ["https://yourdomain.com", "https://www.yourdomain.com"]
      allowed_methods: ["GET", "POST", "PUT", "DELETE"]
      allowed_headers: ["Content-Type", "Authorization"]
      credentials: true
      max_age: 86400

  api_only:
    description: "API-focused CORS configuration"
    variables:
      allowed_origins: ["https://api.yourdomain.com"]
      allowed_methods: ["GET", "POST", "PUT", "DELETE", "PATCH"]
      allowed_headers: ["Content-Type", "Authorization", "X-API-Key"]
      credentials: false
      max_age: 43200

  public_api:
    description: "Public API with broader access"
    variables:
      allowed_origins: ["*"]
      allowed_methods: ["GET", "POST"]
      allowed_headers: ["Content-Type", "X-Requested-With"]
      credentials: false
      max_age: 86400

usage:
  getting_started:
    - "Install CORS middleware: npm install cors"
    - "Import cors in your Express application"
    - "Configure CORS options based on your requirements"
    - "Apply CORS middleware to your Express app"
    - "Test cross-origin requests from your frontend"
    - "Validate CORS headers in browser network tab"

  best_practices:
    - "Never use wildcard (*) origins in production with credentials"
    - "Specify exact origins instead of broad patterns"
    - "Limit allowed methods to only what's necessary"
    - "Use HTTPS origins in production environments"
    - "Regularly audit and update allowed origins"
    - "Monitor CORS errors in application logs"

  limitations:
    - "Wildcard origins cannot be used with credentials"
    - "Some browsers may cache preflight responses"
    - "CORS doesn't protect against all cross-origin attacks"
    - "Complex origin patterns may impact performance"

template: |
  {
    "origin": {{ allowed_origins | tojson }},
    "methods": {{ allowed_methods | tojson }},
    "allowedHeaders": {{ allowed_headers | tojson }},
    "credentials": {{ credentials | tojson }},
    "maxAge": {{ max_age }},
    "exposedHeaders": {{ expose_headers | tojson }},
    "optionsSuccessStatus": 200
  }
