name: "Apache .htaccess Security Template"
category: "security"
description:
  "Apache .htaccess configuration for React/SPA applications with security headers and URL rewriting"
version: "1.0.0"
author: "AutoPR Template System"
tags: ["security", "apache", "htaccess", "spa", "react", "url_rewriting"]

template_info:
  name: "Apache .htaccess Security Config"
  type: "security_configuration"
  framework: "apache"
  target_audience: "Frontend developers, DevOps engineers, Apache administrators"
  primary_use_cases:
    ["SPA routing", "Security headers", "Apache configuration", "Static site hosting"]

variables:
  enable_compression:
    type: "boolean"
    description: "Enable gzip compression for static assets"
    default: true
    required: false

  cache_control:
    type: "boolean"
    description: "Enable browser caching for static assets"
    default: true
    required: false

  security_headers:
    type: "boolean"
    description: "Enable security headers (X-Frame-Options, CSP, etc.)"
    default: true
    required: false

  spa_routing:
    type: "boolean"
    description: "Enable SPA routing (redirect all routes to index.html)"
    default: true
    required: false

  force_https:
    type: "boolean"
    description: "Force HTTPS redirects"
    default: false
    required: false

variants:
  react_spa:
    description: "Optimized configuration for React Single Page Applications"
    variables:
      enable_compression: true
      cache_control: true
      security_headers: true
      spa_routing: true
      force_https: false

  secure_production:
    description: "Maximum security configuration for production environments"
    variables:
      enable_compression: true
      cache_control: true
      security_headers: true
      spa_routing: true
      force_https: true

  basic_static:
    description: "Basic configuration for static websites"
    variables:
      enable_compression: true
      cache_control: true
      security_headers: true
      spa_routing: false
      force_https: false

usage:
  getting_started:
    - "Place .htaccess file in your web root directory"
    - "Ensure Apache mod_rewrite is enabled"
    - "Test SPA routing functionality"
    - "Verify security headers in browser developer tools"
    - "Check compression is working with browser tools"
    - "Test HTTPS redirects if enabled"

  best_practices:
    - "Always test .htaccess changes on staging first"
    - "Enable mod_rewrite and mod_headers in Apache"
    - "Use HTTPS redirects only with valid SSL certificates"
    - "Monitor Apache error logs for configuration issues"
    - "Keep .htaccess files minimal and well-documented"
    - "Regular security audits of header configurations"

  limitations:
    - "Requires Apache web server with mod_rewrite"
    - "Some shared hosting providers restrict .htaccess usage"
    - "Complex rules may impact server performance"
    - "Browser compatibility varies for some security headers"

template: |
  # Apache .htaccess Configuration for {{ framework | default('React') }} Applications

  {% if force_https %}
  # Force HTTPS
  RewriteEngine On
  RewriteCond %{HTTPS} off
  RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]
  {% endif %}

  {% if spa_routing %}
  # SPA Routing - Redirect all routes to index.html
  <IfModule mod_rewrite.c>
    RewriteEngine On
    RewriteBase /
    RewriteRule ^index\.html$ - [L]
    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d
    RewriteRule . /index.html [L]
  </IfModule>
  {% endif %}

  {% if security_headers %}
  # Security Headers
  <IfModule mod_headers.c>
    # Prevent clickjacking
    Header always set X-Frame-Options "DENY"

    # XSS Protection
    Header always set X-XSS-Protection "1; mode=block"

    # Prevent MIME type sniffing
    Header always set X-Content-Type-Options "nosniff"

    # Referrer Policy
    Header always set Referrer-Policy "strict-origin-when-cross-origin"

    # Content Security Policy (adjust as needed)
    Header always set Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self'; frame-ancestors 'none';"
  </IfModule>
  {% endif %}

  {% if cache_control %}
  # Browser Caching
  <IfModule mod_expires.c>
    ExpiresActive On

    # HTML files
    ExpiresByType text/html "access plus 1 hour"

    # CSS and JavaScript
    ExpiresByType text/css "access plus 1 year"
    ExpiresByType application/javascript "access plus 1 year"
    ExpiresByType text/javascript "access plus 1 year"

    # Images
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/svg+xml "access plus 1 year"
    ExpiresByType image/webp "access plus 1 year"

    # Fonts
    ExpiresByType font/woff "access plus 1 year"
    ExpiresByType font/woff2 "access plus 1 year"
    ExpiresByType application/font-woff "access plus 1 year"
    ExpiresByType application/font-woff2 "access plus 1 year"
  </IfModule>

  # Cache Control Headers
  <IfModule mod_headers.c>
    # Cache static assets for 1 year
    <FilesMatch "\.(css|js|png|jpg|jpeg|gif|svg|woff|woff2|webp)$">
      Header set Cache-Control "public, max-age=31536000, immutable"
    </FilesMatch>

    # Cache HTML for 1 hour
    <FilesMatch "\.html$">
      Header set Cache-Control "public, max-age=3600"
    </FilesMatch>
  </IfModule>
  {% endif %}

  {% if enable_compression %}
  # Gzip Compression
  <IfModule mod_deflate.c>
    # Compress HTML, CSS, JavaScript, Text, XML and fonts
    AddOutputFilterByType DEFLATE application/javascript
    AddOutputFilterByType DEFLATE application/rss+xml
    AddOutputFilterByType DEFLATE application/vnd.ms-fontobject
    AddOutputFilterByType DEFLATE application/x-font
    AddOutputFilterByType DEFLATE application/x-font-opentype
    AddOutputFilterByType DEFLATE application/x-font-otf
    AddOutputFilterByType DEFLATE application/x-font-truetype
    AddOutputFilterByType DEFLATE application/x-font-ttf
    AddOutputFilterByType DEFLATE application/x-javascript
    AddOutputFilterByType DEFLATE application/xhtml+xml
    AddOutputFilterByType DEFLATE application/xml
    AddOutputFilterByType DEFLATE font/opentype
    AddOutputFilterByType DEFLATE font/otf
    AddOutputFilterByType DEFLATE font/ttf
    AddOutputFilterByType DEFLATE image/svg+xml
    AddOutputFilterByType DEFLATE image/x-icon
    AddOutputFilterByType DEFLATE text/css
    AddOutputFilterByType DEFLATE text/html
    AddOutputFilterByType DEFLATE text/javascript
    AddOutputFilterByType DEFLATE text/plain
    AddOutputFilterByType DEFLATE text/xml
  </IfModule>
  {% endif %}

  # File Security
  <Files ~ "^\.">
    Order allow,deny
    Deny from all
  </Files>

  # Prevent access to sensitive files
  <FilesMatch "(^#.*#|\.(bak|config|dist|fla|inc|ini|log|psd|sh|sql|sw[op])|~)$">
    Order allow,deny
    Deny from all
    Satisfy All
  </FilesMatch>
