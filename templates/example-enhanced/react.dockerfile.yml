name: "React Dockerfile Template"
description: "Multi-stage Docker build for React applications with nginx serving"
category: "docker"
platforms: ["replit", "lovable", "bolt"]
file_extension: "dockerfile"

# Comprehensive documentation in YAML
documentation:
  overview: |
    This template creates a production-ready Docker image for React applications using a multi-stage build process.
    The first stage builds the application, and the second stage serves it using nginx for optimal performance.

  architecture: |
    Stage 1 (Builder): Node.js environment for building React app
    Stage 2 (Production): Nginx serving static files from build output

  prerequisites:
    - "Node.js application with package.json"
    - "Build script that outputs to /build or /dist directory"
    - "Optional: nginx.conf for custom server configuration"

  deployment_notes: |
    - Image exposes port 80 by default
    - Assumes build output goes to /app/build directory
    - Uses nginx:alpine for small production image size
    - Includes security headers and gzip compression

variables:
  node_version:
    type: "string"
    default: "18"
    description: "Node.js version for the build stage"
    examples: ["16", "18", "20"]
    validation: "Must be a valid Node.js version"

  build_command:
    type: "string"
    default: "npm run build"
    description: "Command to build the React application"
    examples: ["npm run build", "yarn build", "npm run build:prod"]

  nginx_port:
    type: "string"
    default: "80"
    description: "Port for nginx to expose"
    examples: ["80", "8080", "3000"]

variants:
  with_nginx_config:
    name: "With Custom Nginx Config"
    description: "Includes custom nginx configuration file"
    documentation: |
      This variant copies a custom nginx.conf file from your project root.
      Useful for custom routing, headers, or proxy configurations.
    requirements:
      - "nginx.conf file in project root"
    modifications:
      - line: 13
        action: "add_after"
        content: "COPY nginx.conf /etc/nginx/nginx.conf"

  with_env_vars:
    name: "With Environment Variables"
    description: "Includes environment variable support"
    documentation: |
      Adds support for build-time environment variables.
      Useful for different build configurations (staging, production).
    modifications:
      - line: 7
        action: "add_after"
        content: "ARG NODE_ENV=production\nENV NODE_ENV=$NODE_ENV"

usage:
  primary:
    - "Create React App projects"
    - "Vite React projects"
    - "Next.js static exports"

  deployment_targets:
    - "Production deployments with nginx"
    - "Container orchestration (Kubernetes, Docker Swarm)"
    - "Cloud platforms (AWS, Azure, GCP)"

examples:
  basic:
    name: "Basic React App"
    description: "Standard Create React App deployment"
    variables:
      node_version: "18"
      build_command: "npm run build"
    command: |
      generator.generate_from_template("docker/react.dockerfile", {
        "node_version": "18",
        "build_command": "npm run build"
      })

  production:
    name: "Production with Custom Nginx"
    description: "Production deployment with custom nginx configuration"
    variables:
      node_version: "20"
      build_command: "npm run build:prod"
    variants: ["with_nginx_config", "with_env_vars"]
    command: |
      generator.generate_from_template("docker/react.dockerfile", {
        "node_version": "20",
        "build_command": "npm run build:prod"
      }, ["with_nginx_config", "with_env_vars"])

  development:
    name: "Development Build"
    description: "Development build for testing"
    variables:
      node_version: "18"
      build_command: "npm run build:dev"
      nginx_port: "8080"

dependencies:
  required:
    - name: "package.json"
      description: "Node.js package configuration"
    - name: "src/"
      description: "React application source code"

  optional:
    - name: "nginx.conf"
      description: "Custom nginx configuration (for with_nginx_config variant)"
      example_content: |
        server {
          listen 80;
          location / {
            root /usr/share/nginx/html;
            try_files $uri $uri/ /index.html;
          }
        }

troubleshooting:
  common_issues:
    - issue: "Build fails with 'npm not found'"
      solution: "Ensure package.json exists and node_version is valid"

    - issue: "nginx fails to start"
      solution: "Check nginx.conf syntax if using with_nginx_config variant"

    - issue: "App shows blank page"
      solution: "Verify build_command produces output in correct directory"

performance:
  optimizations:
    - "Multi-stage build reduces final image size"
    - "nginx serves static files efficiently"
    - "Alpine Linux base image for minimal footprint"

  metrics:
    - "Typical image size: 50-100MB"
    - "Build time: 2-5 minutes"
    - "Cold start time: <2 seconds"

security:
  considerations:
    - "nginx runs as non-root user"
    - "Only necessary files copied to production stage"
    - "No development dependencies in final image"

  recommendations:
    - "Use specific Node.js version tags"
    - "Regularly update base images"
    - "Scan images for vulnerabilities"
