# AutoPR Engine - Cursor Development Rules

## Project Overview

The AutoPR Engine is a multi-faceted automated code review and quality management system that implements AI-powered code analysis, automated fixes, and quality assurance workflows.

## Development Guidelines

### Code Quality Standards

- **Always provide complete plans** with reasoning based on evidence from code and logs before making changes
- **Explain observations clearly** and provide reasoning to identify exact issues
- **Add console logs** when needed to gather more information
- **Only modify code directly relevant** to the specific request - avoid changing unrelated functionality
- **Never use placeholders** like `# ... rest of the processing ...` - always include complete code
- **Break problems into smaller steps** and think through each step separately before implementing

### Code Structure and Organization

- **Follow the existing architecture** and patterns in the codebase
- **Maintain separation of concerns** between different modules
- **Use proper error handling** with meaningful error messages
- **Include comprehensive tests** for new functionality
- **Document complex logic** with clear comments and docstrings

### AI and Machine Learning Components

- **Quality Analysis Pipeline**: Supports multiple modes (Fast, Comprehensive, AI-Enhanced, Smart)
- **AI Agent Management**: Specialized agents for different review types
- **Performance Optimization**: Intelligent caching and parallel processing
- **Platform Detection**: Intelligent identification of development environments

### Security and Authorization

- **Multi-tiered permission system** (Admin, Maintainer, Developer, Viewer)
- **Resource-specific controls** for projects, repositories, workflows, templates, organizations
- **Secure handling of sensitive data** and API keys
- **Input validation** and sanitization for all user inputs

### Testing and Quality Assurance

- **Unit tests** for all new functionality
- **Integration tests** for complex workflows
- **Performance benchmarks** for optimization features
- **Security scanning** integration
- **Code coverage** requirements

### File Organization

- **Core implementation**: `autopr/ai/implementation_roadmap.py`
- **Quality metrics**: `autopr/quality/metrics_collector.py`
- **AI agents**: `autopr/actions/ai_linting_fixer/agents.py`
- **Authorization**: `autopr/security/authorization/enterprise_manager.py`
- **Platform detection**: `autopr/actions/platform_detector.py`

### Development Workflow

1. **Plan**: Create a complete plan with reasoning before making changes
2. **Implement**: Write complete, functional code without placeholders
3. **Test**: Ensure all functionality works as expected
4. **Document**: Update documentation for any new features
5. **Review**: Self-review code before committing

### Error Handling

- **Fail fast** with clear, actionable error messages
- **Include context** in error messages (file, line, operation)
- **Log errors** with appropriate severity levels
- **Provide recovery suggestions** when possible

### Performance Considerations

- **Use intelligent caching** for expensive operations
- **Implement parallel processing** where appropriate
- **Monitor memory usage** and optimize when needed
- **Profile code** for performance bottlenecks

### Documentation Standards

- **Clear docstrings** for all functions and classes
- **README updates** for new features
- **API documentation** for public interfaces
- **Configuration guides** for complex setups

## Context Usage
