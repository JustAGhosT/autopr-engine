Metadata-Version: 2.4
Name: autopr-engine
Version: 1.0.0
Summary: AI-Powered GitHub PR Automation and Issue Management
Home-page: https://github.com/veritasvault/autopr-engine
Author: VeritasVault Team
Author-email: VeritasVault Team <dev@veritasvault.net>
Maintainer: VeritasVault Team
Maintainer-email: VeritasVault Team <dev@veritasvault.net>
License: MIT
Project-URL: Homepage, https://github.com/veritasvault/autopr-engine
Project-URL: Documentation, https://autopr-engine.readthedocs.io
Project-URL: Repository, https://github.com/veritasvault/autopr-engine
Project-URL: Bug Tracker, https://github.com/veritasvault/autopr-engine/issues
Project-URL: Changelog, https://github.com/veritasvault/autopr-engine/blob/main/CHANGELOG.md
Project-URL: Discussions, https://github.com/veritasvault/autopr-engine/discussions
Keywords: github,pull-request,automation,ai,code-review,ci-cd,workflow,integration,slack,linear,autogen,llm,openai,anthropic,issue-management,quality-gates,platform-detection,multi-agent
Platform: any
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Operating System :: OS Independent
Classifier: Topic :: Software Development
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: Software Development :: Quality Assurance
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Requires-Dist: pydantic<3.0.0,>=2.0.0
Requires-Dist: aiohttp<4.0.0,>=3.8.0
Requires-Dist: structlog<24.0.0,>=22.0.0
Requires-Dist: click<9.0.0,>=8.0.0
Requires-Dist: pyyaml<7.0.0,>=6.0.0
Requires-Dist: jinja2<4.0.0,>=3.1.0
Requires-Dist: pygithub<2.0.0,>=1.58.0
Requires-Dist: GitPython<4.0.0,>=3.1.0
Requires-Dist: openai<2.0.0,>=1.0.0
Requires-Dist: anthropic<1.0.0,>=0.25.0
Requires-Dist: mistralai<2.0.0,>=1.0.0
Requires-Dist: httpx<1.0.0,>=0.24.0
Requires-Dist: websockets<12.0.0,>=11.0.0
Requires-Dist: python-dateutil<3.0.0,>=2.8.0
Requires-Dist: pytz>=2023.3
Requires-Dist: python-dotenv<2.0.0,>=1.0.0
Requires-Dist: toml<1.0.0,>=0.10.0
Provides-Extra: dev
Requires-Dist: pytest<8.0.0,>=7.4.0; extra == "dev"
Requires-Dist: pytest-asyncio<1.0.0,>=0.21.0; extra == "dev"
Requires-Dist: pytest-cov<5.0.0,>=4.1.0; extra == "dev"
Requires-Dist: pytest-mock<4.0.0,>=3.11.0; extra == "dev"
Requires-Dist: black<24.0.0,>=23.7.0; extra == "dev"
Requires-Dist: isort<6.0.0,>=5.12.0; extra == "dev"
Requires-Dist: flake8<7.0.0,>=6.0.0; extra == "dev"
Requires-Dist: mypy<2.0.0,>=1.5.0; extra == "dev"
Requires-Dist: pre-commit<4.0.0,>=3.4.0; extra == "dev"
Requires-Dist: sphinx<8.0.0,>=7.1.0; extra == "dev"
Requires-Dist: sphinx-rtd-theme<2.0.0,>=1.3.0; extra == "dev"
Provides-Extra: monitoring
Requires-Dist: prometheus_client<1.0.0,>=0.17.0; extra == "monitoring"
Requires-Dist: sentry-sdk[fastapi]<2.0.0,>=1.32.0; extra == "monitoring"
Requires-Dist: datadog<1.0.0,>=0.47.0; extra == "monitoring"
Provides-Extra: memory
Requires-Dist: mem0ai<1.0.0,>=0.1.0; extra == "memory"
Requires-Dist: chromadb<1.0.0,>=0.4.0; extra == "memory"
Requires-Dist: qdrant-client<2.0.0,>=1.5.0; extra == "memory"
Provides-Extra: ai
Requires-Dist: pyautogen<1.0.0,>=0.2.0; extra == "ai"
Requires-Dist: langchain<1.0.0,>=0.0.300; extra == "ai"
Requires-Dist: langchain-openai<1.0.0,>=0.0.5; extra == "ai"
Requires-Dist: langchain-anthropic<1.0.0,>=0.1.0; extra == "ai"
Provides-Extra: database
Requires-Dist: asyncpg<1.0.0,>=0.28.0; extra == "database"
Requires-Dist: sqlalchemy[asyncio]<3.0.0,>=2.0.0; extra == "database"
Requires-Dist: alembic<2.0.0,>=1.12.0; extra == "database"
Requires-Dist: redis<5.0.0,>=4.6.0; extra == "database"
Requires-Dist: aioredis<3.0.0,>=2.0.0; extra == "database"
Provides-Extra: server
Requires-Dist: fastapi<1.0.0,>=0.103.0; extra == "server"
Requires-Dist: uvicorn[standard]<1.0.0,>=0.23.0; extra == "server"
Requires-Dist: gunicorn<22.0.0,>=21.2.0; extra == "server"
Provides-Extra: resilience
Requires-Dist: pybreaker<2.0.0,>=1.0.0; extra == "resilience"
Requires-Dist: tenacity<9.0.0,>=8.2.0; extra == "resilience"
Requires-Dist: limits<4.0.0,>=3.6.0; extra == "resilience"
Provides-Extra: full
Requires-Dist: autopr-engine[ai,database,dev,memory,monitoring,resilience,server]; extra == "full"
Dynamic: author
Dynamic: home-page
Dynamic: maintainer
Dynamic: platform
Dynamic: requires-python

# AutoPR Engine ü§ñ

**AI-Powered GitHub PR Automation and Issue Management**

[![PyPI version](https://badge.fury.io/py/autopr-engine.svg)](https://badge.fury.io/py/autopr-engine)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)
[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)
[![GitHub Marketplace](https://img.shields.io/badge/GitHub-Marketplace-blue)](https://github.com/marketplace/autopr-engine)

AutoPR Engine is a comprehensive AI-powered automation platform that transforms GitHub pull request workflows through intelligent analysis, issue creation, and multi-agent collaboration.

---

## üåü **Features**

### **ü§ñ AI-Powered PR Analysis**
- **Multi-Agent Review**: CodeRabbit, GitHub Copilot, AI TypeScript Check integration
- **Platform Detection**: Detects 25+ development platforms (Replit, Bolt, Lovable, etc.)
- **Intelligent Issue Classification**: Security, performance, bugs, features
- **Quality Gates**: Automated validation before merge

### **üîó Smart Integrations**
- **Communication**: Slack (Axolo), Microsoft Teams, Discord, Notion
- **Project Management**: Linear, GitHub Issues, Jira
- **AI Tools**: AutoGen multi-agent, configurable LLM providers
- **Monitoring**: Sentry, DataDog, Prometheus metrics

### **‚ö° Advanced Automation**
- **Issue Auto-Creation**: GitHub Issues and Linear tickets
- **AI Tool Assignment**: Route issues to specialized AI tools
- **Workflow Orchestration**: 20+ pre-built workflows
- **Memory System**: Learn from past interactions and patterns

---

## üöÄ **Quick Start**

### **Installation**

```bash
# Install from PyPI
pip install autopr-engine

# Or install with all features
pip install "autopr-engine[full]"

# Docker deployment
docker run -d \
  -e GITHUB_TOKEN=your_token \
  -e OPENAI_API_KEY=your_key \
  -p 8080:8080 \
  neuralliquid/autopr-engine:latest
```

### **Basic Configuration**

```python
# autopr_config.py
from autopr import AutoPREngine

# Initialize engine
engine = AutoPREngine({
    'github_token': 'your_github_token',
    'openai_api_key': 'your_openai_key',
    'repositories': ['owner/repo'],
    'integrations': {
        'slack': {
            'webhook_url': 'your_slack_webhook',
            'channel': '#pr-reviews'
        },
        'linear': {
            'api_key': 'your_linear_key',
            'team_id': 'your_team_id'
        }
    }
})

# Start processing
await engine.start()
```

### **GitHub Action Integration**

```yaml
# .github/workflows/autopr.yml
name: AutoPR Analysis
on:
  pull_request:
    types: [opened, synchronize]

jobs:
  autopr:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: neuralliquid/autopr-engine@v1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          openai-api-key: ${{ secrets.OPENAI_API_KEY }}
          linear-api-key: ${{ secrets.LINEAR_API_KEY }}
```

---

## üìñ **Documentation**

### **Core Concepts**
- [**Architecture Overview**](docs/architecture.md) - System design and components
- [**Workflow Guide**](docs/workflows.md) - Creating and customizing workflows
- [**Action Reference**](docs/actions.md) - Complete action documentation
- [**Integration Guide**](docs/integrations.md) - Setting up external services

### **Platform-Specific Guides**
- [**Replit Integration**](docs/platforms/replit.md) - Prototype to production
- [**Slack/Axolo Setup**](docs/integrations/axolo.md) - PR channel automation
- [**Linear Workflow**](docs/integrations/linear.md) - Issue management
- [**Azure Deployment**](docs/deployment/azure.md) - Cloud deployment guide

### **Advanced Topics**
- [**Multi-Agent AI**](docs/advanced/autogen.md) - AutoGen integration
- [**Memory Systems**](docs/advanced/memory.md) - Learning and patterns
- [**Custom Actions**](docs/advanced/custom-actions.md) - Building your own
- [**Monitoring**](docs/advanced/monitoring.md) - Observability setup

---

## üèóÔ∏è **Architecture**

```mermaid
graph TB
    A[GitHub PR Event] --> B[AutoPR Engine]
    B --> C[Platform Detector]
    B --> D[AI Analysis Engine]
    
    D --> E[CodeRabbit Integration]
    D --> F[GitHub Copilot]
    D --> G[AI TypeScript Check]
    
    C --> H[Workflow Router]
    H --> I[Issue Creator]
    H --> J[AI Assignment]
    
    I --> K[GitHub Issues]
    I --> L[Linear Tickets]
    
    J --> M[Communication Hub]
    M --> N[Slack/Axolo]
    M --> O[Teams/Discord]
    
    subgraph "AI Layer"
        P[AutoGen Multi-Agent]
        Q[Configurable LLM]
        R[Memory System]
    end
    
    subgraph "Quality Gates"
        S[Security Scanning]
        T[Performance Analysis]
        U[Test Execution]
    end
```

---

## üõ†Ô∏è **Development**

### **Setup Development Environment**

```bash
# Clone repository
git clone https://github.com/neuralliquid/autopr-engine.git
cd autopr-engine

# Create virtual environment
python -m venv venv
source venv/bin/activate  # On Windows: venv\Scripts\activate

# Install in development mode
pip install -e ".[dev]"

# Run tests
pytest

# Run with live reload
python -m autopr.server --reload
```

### **Project Structure**

```
autopr-engine/
‚îú‚îÄ‚îÄ autopr/                 # Core engine package
‚îÇ   ‚îú‚îÄ‚îÄ actions/            # 50+ automation actions
‚îÇ   ‚îú‚îÄ‚îÄ workflows/          # Pre-built workflow definitions
‚îÇ   ‚îú‚îÄ‚îÄ integrations/       # External service integrations
‚îÇ   ‚îú‚îÄ‚îÄ ai/                 # AI and LLM components
‚îÇ   ‚îú‚îÄ‚îÄ memory/             # Learning and memory systems
‚îÇ   ‚îú‚îÄ‚îÄ quality/            # Quality gates and validation
‚îÇ   ‚îî‚îÄ‚îÄ server/             # Web server and API
‚îú‚îÄ‚îÄ tests/                  # Comprehensive test suite
‚îú‚îÄ‚îÄ docs/                   # Documentation
‚îú‚îÄ‚îÄ docker/                 # Container definitions
‚îú‚îÄ‚îÄ scripts/                # Utility scripts
‚îú‚îÄ‚îÄ examples/               # Usage examples
‚îú‚îÄ‚îÄ requirements.txt        # Production dependencies
‚îú‚îÄ‚îÄ requirements-dev.txt    # Development dependencies
‚îú‚îÄ‚îÄ setup.py               # Package configuration
‚îú‚îÄ‚îÄ pyproject.toml         # Modern Python packaging
‚îú‚îÄ‚îÄ Dockerfile             # Container build
‚îú‚îÄ‚îÄ docker-compose.yml     # Local development
‚îî‚îÄ‚îÄ README.md              # This file
```

### **Testing**

```bash
# Run all tests
pytest

# Run with coverage
pytest --cov=autopr --cov-report=html

# Run specific test categories
pytest tests/actions/      # Action tests
pytest tests/workflows/    # Workflow tests
pytest tests/integration/  # Integration tests

# Run performance tests
pytest tests/performance/ -v
```

---

## üîß **Configuration**

### **Environment Variables**

```bash
# Core Configuration
GITHUB_TOKEN=ghp_xxxxxxxxxxxx           # GitHub API token
OPENAI_API_KEY=sk-xxxxxxxx              # OpenAI API key
AUTOPR_LOG_LEVEL=INFO                   # Logging level

# Optional AI Providers
ANTHROPIC_API_KEY=sk-ant-xxxxxxxx       # Claude API key
MISTRAL_API_KEY=xxxxxxxx                # Mistral API key
GROQ_API_KEY=gsk_xxxxxxxx               # Groq API key

# Integrations
SLACK_WEBHOOK_URL=https://hooks.slack.com/...  # Slack notifications
LINEAR_API_KEY=lin_api_xxxxxxxx         # Linear integration
AXOLO_WORKSPACE_URL=https://...         # Axolo integration

# Infrastructure
REDIS_URL=redis://localhost:6379        # Caching and state
DATABASE_URL=postgresql://...           # PostgreSQL database
SENTRY_DSN=https://...                  # Error tracking
```

### **Configuration File**

```yaml
# autopr.yml
repositories:
  - owner: neuralliquid
    repos: ["vv-landing", "vv-backend"]
    
workflows:
  - name: "pr_review_analysis"
    triggers: ["pull_request.opened", "pull_request.synchronize"]
    actions:
      - platform_detector
      - ai_analysis
      - issue_creator
      - team_notification

integrations:
  slack:
    enabled: true
    channels:
      pr_reviews: "#pr-reviews"
      security_alerts: "#security"
  
  linear:
    enabled: true
    team_id: "VV"
    project_templates:
      security: "Security Issues"
      performance: "Performance Optimization"

ai_providers:
  default: "openai"
  fallback_order: ["openai", "anthropic", "mistral"]
  models:
    openai: "gpt-4"
    anthropic: "claude-3-sonnet-20240229"
```

---

## üîå **Integrations**

### **Communication Platforms**
- **[Slack](docs/integrations/slack.md)** - Channel automation with Axolo
- **[Microsoft Teams](docs/integrations/teams.md)** - Enterprise communication
- **[Discord](docs/integrations/discord.md)** - Community-focused teams
- **[Notion](docs/integrations/notion.md)** - Documentation automation

### **Project Management**
- **[Linear](docs/integrations/linear.md)** - Modern issue tracking
- **[GitHub Issues](docs/integrations/github.md)** - Native GitHub integration
- **[Jira](docs/integrations/jira.md)** - Enterprise project management

### **AI & Development Tools**
- **[CodeRabbit](docs/integrations/coderabbit.md)** - AI code review
- **[GitHub Copilot](docs/integrations/copilot.md)** - AI coding assistant
- **[AutoGen](docs/integrations/autogen.md)** - Multi-agent collaboration
- **[Platform Detection](docs/features/platform-detection.md)** - 25+ platforms

---

## üìä **Monitoring & Observability**

### **Built-in Metrics**
- PR processing times and success rates
- AI tool performance and accuracy
- Issue creation and resolution tracking
- Integration health monitoring

### **Supported Monitoring**
- **Prometheus** metrics collection
- **Grafana** dashboards
- **Sentry** error tracking
- **DataDog** APM integration
- **Custom webhooks** for external systems

---

## ü§ù **Contributing**

We welcome contributions! Please see our [Contributing Guide](CONTRIBUTING.md) for details.

### **Development Workflow**
1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Make your changes
4. Add tests for new functionality
5. Run the test suite (`pytest`)
6. Commit your changes (`git commit -m 'Add amazing feature'`)
7. Push to the branch (`git push origin feature/amazing-feature`)
8. Open a Pull Request

### **Code Standards**
- Follow [PEP 8](https://peps.python.org/pep-0008/) style guidelines
- Add type hints for all functions
- Write comprehensive tests for new features
- Update documentation for user-facing changes

---

## üìù **License**

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

---

## üôè **Acknowledgments**

- **AutoGen** team for multi-agent AI framework
- **CodeRabbit** for AI code review integration
- **Axolo** team for Slack PR automation
- **GitHub** for the platform and APIs
- **OpenAI** and **Anthropic** for AI capabilities
- All our **contributors** and **community members**

---

## üìû **Support**

- **Documentation**: [https://autopr-engine.readthedocs.io](https://autopr-engine.readthedocs.io)
- **GitHub Issues**: [Report bugs and request features](https://github.com/neuralliquid/autopr-engine/issues)
- **Discussions**: [Community discussions](https://github.com/neuralliquid/autopr-engine/discussions)
- **Email**: [support@neuralliquid.com](mailto:support@neuralliquid.com)

---

**Made with ‚ù§Ô∏è by the NeuralLiquid team** 
