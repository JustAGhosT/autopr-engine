name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      volume:
        description: "Volume level (0-1000)"
        required: false
        default: 500
        type: number

env:
  # Volume resolved in setup step; default here is empty
  VOLUME: ""
  PYTHON_VERSION: "3.13"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      volume: ${{ steps.set-volume.outputs.volume }}
      run-tests: ${{ steps.set-volume.outputs.run-tests }}
      run-lint: ${{ steps.set-volume.outputs.run-lint }}
      run-typecheck: ${{ steps.set-volume.outputs.run-typecheck }}
      run-security: ${{ steps.set-volume.outputs.run-security }}
    steps:
      - name: Set volume level
        id: set-volume
        run: |
          # Determine volume from (in order): workflow input, repo vars by event, fallback 100
          INPUT_VOLUME='${{ github.event.inputs.volume }}'
          if [ -n "$INPUT_VOLUME" ] && [ "$INPUT_VOLUME" != 'null' ]; then
            VOLUME="$INPUT_VOLUME"
          else
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              VOLUME='${{ vars.AUTOPR_VOLUME_PR || '100' }}'
            elif [ "${{ github.event_name }}" = "push" ]; then
              VOLUME='${{ vars.AUTOPR_VOLUME_CHECKIN || '100' }}'
            else
              VOLUME='${{ vars.AUTOPR_VOLUME_DEV || '100' }}'
            fi
          fi
          echo "volume=$VOLUME" >> $GITHUB_OUTPUT

          # Set flags based on volume level
          if [ "$VOLUME" -ge 1 ]; then
            echo "run-tests=true" >> $GITHUB_OUTPUT
          else
            echo "run-tests=false" >> $GITHUB_OUTPUT
          fi

          if [ "$VOLUME" -ge 200 ]; then
            echo "run-lint=true" >> $GITHUB_OUTPUT
          else
            echo "run-lint=false" >> $GITHUB_OUTPUT
          fi

          if [ "$VOLUME" -ge 400 ]; then
            echo "run-typecheck=true" >> $GITHUB_OUTPUT
          else
            echo "run-typecheck=false" >> $GITHUB_OUTPUT
          fi

          if [ "$VOLUME" -ge 600 ]; then
            echo "run-security=true" >> $GITHUB_OUTPUT
          else
            echo "run-security=false" >> $GITHUB_OUTPUT
          fi

  test:
    needs: setup
    if: needs.setup.outputs.run-tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov pytest-asyncio

      - name: Run tests
        run: |
          pytest tests/ --cov=autopr --cov-report=xml

      - name: Upload coverage to Codecov
        if: github.event_name == 'push' && env.PYTHON_VERSION == '3.13'
        uses: codecov/codecov-action@v3

  lint:
    needs: setup
    if: needs.setup.outputs.run-lint == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install ruff black isort

      - name: Run linters (volume-aware; relaxed at low volume)
        env:
          VOLUME: ${{ needs.setup.outputs.volume }}
        run: |
          if [ "$VOLUME" -lt 300 ]; then
            echo "Low volume ($VOLUME): running Ruff non-blocking on changed files only"
            git fetch origin ${{ github.base_ref }} --depth=1 || true
            FILES=$(git diff --name-only origin/${{ github.base_ref }}... | grep '^autopr/.*\.py$' || true)
            if [ -z "$FILES" ]; then echo "No Python changes"; exit 0; fi
            # Run Ruff with a minimal rule-set and don't fail the job
            ruff check $FILES --ignore=ARG002,TID252,TD002,TD003,TRY300,TRY401,DTZ005,PTH123,B019,S112,S110 --output-format=github || true
          else
            echo "Higher volume ($VOLUME): running Ruff with standard settings"
            ruff check autopr/ --output-format=github
          fi

  typecheck:
    needs: setup
    if: needs.setup.outputs.run-typecheck == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install mypy types-PyYAML

      - name: Run type checking
        run: |
          mypy autopr/

  security:
    needs: setup
    if: needs.setup.outputs.run-security == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install bandit safety

      - name: Run security checks
        run: |
          bandit -r autopr/
          safety check --full-report

  notify:
    needs: [test, lint, typecheck, security]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify status
        uses: actions/github-script@v6
        env:
          TEST_RESULT: ${{ needs.test.result }}
          LINT_RESULT: ${{ needs.lint.result }}
          TYPECHECK_RESULT: ${{ needs.typecheck.result }}
          SECURITY_RESULT: ${{ needs.security.result }}
        with:
          script: |
            const results = {
              test: process.env.TEST_RESULT,
              lint: process.env.LINT_RESULT,
              typecheck: process.env.TYPECHECK_RESULT,
              security: process.env.SECURITY_RESULT,
            };
            const failed = Object.entries(results)
              .filter(([_, r]) => r === 'failure')
              .map(([name]) => name);
            console.log('Job results:', results);
            if (failed.length > 0) {
              core.setFailed(`The following jobs failed: ${failed.join(', ')}`);
            }
