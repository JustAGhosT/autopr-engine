name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      volume:
        description: 'Volume level (0-1000)'
        required: false
        default: 500
        type: number

env:
  VOLUME: ${{ github.event.inputs.volume || '500' }}
  PYTHON_VERSION: '3.13'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      volume: ${{ steps.set-volume.outputs.volume }}
      run-tests: ${{ steps.set-volume.outputs.run-tests }}
      run-lint: ${{ steps.set-volume.outputs.run-lint }}
      run-typecheck: ${{ steps.set-volume.outputs.run-typecheck }}
      run-security: ${{ steps.set-volume.outputs.run-security }}
    steps:
      - name: Set volume level
        id: set-volume
        run: |
          VOLUME=${{ env.VOLUME }}
          echo "volume=$VOLUME" >> $GITHUB_OUTPUT
          
          # Set flags based on volume level
          if [ "$VOLUME" -ge 1 ]; then
            echo "run-tests=true" >> $GITHUB_OUTPUT
          else
            echo "run-tests=false" >> $GITHUB_OUTPUT
          fi
          
          if [ "$VOLUME" -ge 200 ]; then
            echo "run-lint=true" >> $GITHUB_OUTPUT
          else
            echo "run-lint=false" >> $GITHUB_OUTPUT
          fi
          
          if [ "$VOLUME" -ge 400 ]; then
            echo "run-typecheck=true" >> $GITHUB_OUTPUT
          else
            echo "run-typecheck=false" >> $GITHUB_OUTPUT
          fi
          
          if [ "$VOLUME" -ge 600 ]; then
            echo "run-security=true" >> $GITHUB_OUTPUT
          else
            echo "run-security=false" >> $GITHUB_OUTPUT
          fi

  test:
    needs: setup
    if: needs.setup.outputs.run-tests == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install pytest pytest-cov
          
      - name: Run tests
        run: |
          pytest tests/ --cov=autopr --cov-report=xml
          
      - name: Upload coverage to Codecov
        if: github.event_name == 'push' && env.PYTHON_VERSION == '3.13'
        uses: codecov/codecov-action@v3

  lint:
    needs: setup
    if: needs.setup.outputs.run-lint == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install flake8 black isort
          
      - name: Run linters
        run: |
          flake8 autopr/
          black --check autopr/
          isort --check-only autopr/

  typecheck:
    needs: setup
    if: needs.setup.outputs.run-typecheck == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install mypy
          
      - name: Run type checking
        run: |
          mypy autopr/

  security:
    needs: setup
    if: needs.setup.outputs.run-security == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install bandit safety
          
      - name: Run security checks
        run: |
          bandit -r autopr/
          safety check --full-report

  notify:
    needs: [test, lint, typecheck, security]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify status
        if: contains(needs.*.result, 'failure')
        uses: actions/github-script@v6
        with:
          script: |
            const failedJobs = Object.entries(context.jobs)
              .filter(([_, job]) => job.result === 'failure')
              .map(([name]) => name);
              
            if (failedJobs.length > 0) {
              core.setFailed(`The following jobs failed: ${failedJobs.join(', ')}`);
            }
