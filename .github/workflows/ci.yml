name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: "Environment to deploy to"
        required: false
        default: "staging"
        type: choice
        options:
          - staging
          - production

env:
  PYTHON_VERSION: "3.13"
  POETRY_VERSION: "1.6.1"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code quality and security checks
  quality:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy bandit safety
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Extract version
        id: version
        run: |
          VERSION=$(python -c "import autopr; print(autopr.__version__)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Code formatting check (Black)
        run: black --check --diff .

      - name: Import sorting check (isort)
        run: isort --check-only --diff .

      - name: Linting (flake8)
        run: flake8 autopr tests

      - name: Type checking (mypy)
        run: mypy autopr

      - name: Security check (Bandit)
        run: bandit -r autopr -f json -o bandit-report.json
        continue-on-error: true

      - name: Dependency security check (Safety)
        run: safety check --json --output safety-report.json
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit and integration tests
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: autopr_test
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
        options: >-
          --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key:
            ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements*.txt')
            }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/autopr_test
          REDIS_URL: redis://localhost:6379/0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: test_key
        run: |
          pytest tests/unit/ -v --cov=autopr --cov-report=xml --cov-report=term-missing

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/autopr_test
          REDIS_URL: redis://localhost:6379/0
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENAI_API_KEY: test_key
        run: |
          pytest tests/integration/ -v --cov=autopr --cov-append --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build and test Docker image
  build:
    runs-on: ubuntu-latest
    needs: [quality, test]
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v4

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v4
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            RUN_TESTS=true

      - name: Run container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
        if: github.event_name != 'pull_request'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: "trivy-results.sarif"
        if: github.event_name != 'pull_request'

  # End-to-end tests
  e2e:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.yml -f docker-compose.test.yml up -d
          sleep 30  # Wait for services to be ready

      - name: Run E2E tests
        env:
          AUTOPR_BASE_URL: http://localhost:8080
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -m pytest tests/e2e/ -v --tb=short

      - name: Collect container logs
        if: always()
        run: |
          docker-compose logs > container-logs.txt

      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: container-logs
          path: container-logs.txt

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Performance and load testing
  performance:
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install load testing tools
        run: |
          pip install locust

      - name: Start application
        run: |
          docker-compose up -d autopr-engine postgres redis
          sleep 30

      - name: Run load tests
        run: |
          locust -f tests/performance/locustfile.py --host http://localhost:8080 \
                 --users 10 --spawn-rate 2 --run-time 300s --headless \
                 --html performance-report.html

      - name: Upload performance report
        uses: actions/upload-artifact@4
        with:
          name: performance-report
          path: performance-report.html

      - name: Cleanup
        if: always()
        run: docker-compose down -v

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [quality, test, build, e2e]
    if:
      github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' &&
      github.event.inputs.deploy_environment == 'staging')
    environment:
      name: staging
      url: https://autopr-staging.veritasvault.net
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add actual deployment commands here
          # e.g., kubectl, terraform, ansible, etc.

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [quality, test, build, e2e, performance]
    if:
      startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' &&
      github.event.inputs.deploy_environment == 'production')
    environment:
      name: production
      url: https://autopr.veritasvault.net
    steps:
      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add actual deployment commands here

  # Release to PyPI
  release:
    runs-on: ubuntu-latest
    needs: [quality, test, build]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/project/autopr-engine/
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: twine upload dist/*

  # Create GitHub release
  github-release:
    runs-on: ubuntu-latest
    needs: [release]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from git commits
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s (%h)")
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: AutoPR Engine ${{ github.ref_name }}
          body: |
            ## What's Changed

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            pip install autopr-engine==${{ github.ref_name }}
            ```

            ## Docker

            ```bash
            docker pull ghcr.io/veritasvault/autopr-engine:${{ github.ref_name }}
            ```
          draft: false
          prerelease:
            ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') ||
            contains(github.ref_name, 'rc') }}

  # Notify team of deployment status
  notify:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, release, github-release]
    if:
      always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result !=
      'skipped' || needs.release.result != 'skipped')
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v4
        with:
          status: ${{ job.status }}
          channel: "#autopr-deployments"
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
