name: Quality Feedback
on:
  pull_request:
    branches:
      - main
      - develop

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  quality-feedback:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.13"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run pre-commit hooks
        run: |
          pre-commit install
          pre-commit run --all-files

      - name: Comment PR with quality results
        if: github.event.pull_request.head.repo.fork == false
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `## Quality Feedback âœ…

            **Python Version:** ${{ matrix.python-version }}

            **Pre-commit Hooks:** âœ… Passed

            **Note:** Comprehensive quality checks are run in the CI workflow with volume-aware execution.

            ---
            *Quality feedback completed successfully*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  security-feedback:
    runs-on: ubuntu-latest
    if: github.event.pull_request.head.repo.fork == false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Install security tools
        run: |
          poetry run pip install bandit safety

      - name: Run security scan
        run: |
          poetry run bandit -r autopr/ -f json -o bandit-report.json || true
          poetry run safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

      - name: Comment security results
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            let securityComment = '## Security Scan Results ðŸ”’\n\n';

            // Read bandit report
            try {
              if (fs.existsSync('bandit-report.json')) {
                const banditReport = JSON.parse(fs.readFileSync('bandit-report.json', 'utf8'));
                const issues = banditReport.results || [];
                
                securityComment += `**Bandit Security Issues:** ${issues.length}\n`;
                
                if (issues.length > 0) {
                  securityComment += '\n### Security Issues Found:\n';
                  issues.slice(0, 5).forEach(issue => {
                    securityComment += `- **${issue.issue_severity}**: ${issue.issue_text} (${issue.filename}:${issue.line_number})\n`;
                  });
                  
                  if (issues.length > 5) {
                    securityComment += `- ... and ${issues.length - 5} more issues\n`;
                  }
                }
              }
            } catch (error) {
              securityComment += '**Bandit Security Issues:** âœ… No issues found\n';
            }

            // Read safety report
            try {
              if (fs.existsSync('safety-report.json')) {
                const safetyReport = JSON.parse(fs.readFileSync('safety-report.json', 'utf8'));
                const vulnerabilities = safetyReport.vulnerabilities || [];
                
                securityComment += `\n**Dependency Vulnerabilities:** ${vulnerabilities.length}\n`;
                
                if (vulnerabilities.length > 0) {
                  securityComment += '\n### Vulnerable Dependencies:\n';
                  vulnerabilities.slice(0, 5).forEach(vuln => {
                    securityComment += `- **${vuln.package}**: ${vuln.vulnerability_id} - ${vuln.advisory}\n`;
                  });
                  
                  if (vulnerabilities.length > 5) {
                    securityComment += `- ... and ${vulnerabilities.length - 5} more vulnerabilities\n`;
                  }
                }
              }
            } catch (error) {
              securityComment += '\n**Dependency Vulnerabilities:** âœ… No vulnerabilities found\n';
            }

            securityComment += '\n---\n*Security scan completed*';

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: securityComment
            });
