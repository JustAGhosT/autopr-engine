name: "Phase 1: Complete PR Review and Issue Management"
description: "Comprehensive PR review analysis with automatic issue creation and AI assignment"

triggers:
  - on: pull_request
    events: [opened, synchronize]
  - on: pull_request_review
    events: [submitted]

inputs:
  severity_threshold:
    type: string
    default: "medium"
    description: "Minimum severity level for processing issues"
  auto_assign:
    type: boolean
    default: true
    description: "Automatically assign issues to AI tools"
  create_linear_tickets:
    type: boolean
    default: true
    description: "Create Linear tickets for feature development"
  notify_team:
    type: boolean
    default: true
    description: "Send team notifications for created issues"

steps:
  - name: "Collect PR Review Data"
    id: collect_reviews
    description: "Gather all AI review data from CodeRabbit, Copilot, and TypeScript Check"
    uses: script
    with:
      script: |
        import json
        import os
        import requests

        # Initialize review data structure
        review_data = {
            'coderabbit': {'findings': []},
            'copilot': {'suggestions': []},
            'typescript_check': {'errors': []}
        }

        # Get CodeRabbit review data
        try:
            # CodeRabbit stores review data in PR comments/reviews
            coderabbit_data = get_coderabbit_review_data(pr_number)
            review_data['coderabbit'] = coderabbit_data
        except Exception as e:
            print(f"Error collecting CodeRabbit data: {e}")

        # Get GitHub Copilot suggestions
        try:
            copilot_data = get_copilot_suggestions(pr_number)
            review_data['copilot'] = copilot_data
        except Exception as e:
            print(f"Error collecting Copilot data: {e}")

        # Get AI TypeScript Check results
        try:
            ts_data = get_typescript_check_results(pr_number)
            review_data['typescript_check'] = ts_data
        except Exception as e:
            print(f"Error collecting TypeScript data: {e}")

        # Output the collected data
        return {
            'review_data': review_data,
            'pr_number': pr_number,
            'repository': repository
        }

        def get_coderabbit_review_data(pr_number):
            """Extract CodeRabbit findings from PR reviews"""
            # This would integrate with CodeRabbit's API or parse review comments
            # For now, return sample data structure
            return {
                'findings': [
                    {
                        'category': 'typescript',
                        'severity': 'high',
                        'title': 'Missing type annotation',
                        'description': 'Function parameter lacks proper TypeScript type',
                        'file': 'src/components/Dashboard.tsx',
                        'line': 25,
                        'suggestion': 'Add interface for props parameter',
                        'confidence': 0.9,
                        'tags': ['typescript', 'type-safety']
                    }
                ]
            }

        def get_copilot_suggestions(pr_number):
            """Get GitHub Copilot Chat suggestions"""
            return {
                'suggestions': [
                    {
                        'type': 'improvement',
                        'priority': 'medium',
                        'title': 'Performance optimization opportunity',
                        'explanation': 'Consider memoizing this component',
                        'file': 'src/components/Dashboard.tsx',
                        'code': 'const MemoizedDashboard = React.memo(Dashboard);'
                    }
                ]
            }

        def get_typescript_check_results(pr_number):
            """Get AI TypeScript Check results"""
            return {
                'errors': [
                    {
                        'category': 'error',
                        'messageText': 'Property "user" does not exist on type "Props"',
                        'file': 'src/components/Dashboard.tsx',
                        'line': 15,
                        'suggestion': 'Add user property to Props interface'
                    }
                ]
            }

  - name: "Analyze PR Reviews"
    id: analyze_reviews
    description: "Use PR Review Analyzer to process all review data"
    uses: ./actions/pr_review_analyzer.py
    with:
      pr_number: "${{ steps.collect_reviews.outputs.pr_number }}"
      repository: "${{ steps.collect_reviews.outputs.repository }}"
      review_data: "${{ steps.collect_reviews.outputs.review_data }}"
      severity_threshold: "${{ inputs.severity_threshold }}"
      auto_assign: "${{ inputs.auto_assign }}"

  - name: "Create Issues and Tickets"
    id: create_issues
    description: "Create GitHub issues and Linear tickets based on analysis"
    uses: ./actions/issue_creator.py
    with:
      github_issues: "${{ steps.analyze_reviews.outputs.github_issues_created }}"
      linear_tickets: "${{ steps.analyze_reviews.outputs.linear_tickets_created }}"
      ai_assignments: "${{ steps.analyze_reviews.outputs.ai_assignments }}"
      repository: "${{ steps.collect_reviews.outputs.repository }}"
      create_github: true
      create_linear: "${{ inputs.create_linear_tickets }}"
      notify_ai_tools: true

  - name: "Complex Task AutoGen Processing"
    id: autogen_processing
    description: "Use AutoGen for complex multi-agent tasks if needed"
    condition: "${{ steps.analyze_reviews.outputs.should_use_autogen }}"
    uses: ./actions/autogen_implementation.py
    with:
      task_description: "Resolve complex issues found in PR review"
      task_type: "bug_fix"
      repository: "${{ steps.collect_reviews.outputs.repository }}"
      file_paths: "${{ steps.analyze_reviews.outputs.affected_files }}"
      requirements: "${{ steps.analyze_reviews.outputs.complex_requirements }}"
      complexity_level: "complex"
      max_agents: 4

  - name: "Update PR Status"
    id: update_pr
    description: "Update PR with review results and next steps"
    uses: script
    with:
      script: |
        import json

        # Get results from previous steps
        analysis_results = ${{ steps.analyze_reviews.outputs }}
        issue_results = ${{ steps.create_issues.outputs }}
        autogen_results = ${{ steps.autogen_processing.outputs if steps.autogen_processing.outputs else {} }}

        # Create comprehensive PR comment
        comment_body = create_pr_summary_comment(
            analysis_results,
            issue_results,
            autogen_results
        )

        # Post comment to PR
        post_pr_comment(pr_number, comment_body)

        # Set PR status based on findings
        if analysis_results.get('should_block_merge', False):
            set_pr_status('failure', 'Critical issues found - merge blocked')
        else:
            set_pr_status('success', 'Review completed - ready for human review')

        return {
            'comment_posted': True,
            'status_updated': True,
            'merge_blocked': analysis_results.get('should_block_merge', False)
        }

        def create_pr_summary_comment(analysis, issues, autogen):
            """Create comprehensive PR summary comment"""

            comment = f"""
            ## ðŸ¤– AI Review Summary

            {analysis.get('analysis_summary', 'No analysis summary available')}

            ### ðŸ“Š Issues Found
            - **Total Issues**: {len(analysis.get('issues_found', []))}
            - **Severity Breakdown**: {format_severity_breakdown(analysis.get('issues_found', []))}

            ### ðŸŽ¯ Actions Taken

            #### GitHub Issues Created
            {format_github_issues(issues.get('github_issues_created', []))}

            #### Linear Tickets Created
            {format_linear_tickets(issues.get('linear_tickets_created', []))}

            #### AI Assignments
            {format_ai_assignments(issues.get('ai_notifications_sent', []))}

            ### ðŸš¦ Next Steps

            #### Immediate Actions Required
            {format_immediate_actions(analysis.get('issues_found', []))}

            #### Automated Processing
            {format_automated_processing(issues.get('ai_notifications_sent', []))}

            ### ðŸ”„ AutoGen Multi-Agent Processing
            {format_autogen_results(autogen) if autogen else 'No complex multi-agent tasks required'}

            ---
            *This review was automatically generated by AutoPR Phase 1 workflow*
            """

            return comment

outputs:
  review_completed:
    description: "Whether review analysis was completed"
    value: "${{ steps.analyze_reviews.outputs.analysis_completed }}"
  issues_created:
    description: "Number of issues created"
    value: "${{ steps.create_issues.outputs.total_issues_created }}"
  tickets_created:
    description: "Number of Linear tickets created"
    value: "${{ steps.create_issues.outputs.total_tickets_created }}"
  merge_blocked:
    description: "Whether merge should be blocked"
    value: "${{ steps.update_pr.outputs.merge_blocked }}"

# Workflow metadata
metadata:
  version: "1.0.0"
  phase: "1"
  complexity: "medium"
  estimated_duration: "5-15 minutes"
  dependencies:
    - "PR Review Analyzer"
    - "Issue Creator"
    - "AutoGen Implementation"
    - "GitHub API"
    - "Linear API"
  requirements:
    - "GITHUB_TOKEN"
    - "LINEAR_API_KEY"
    - "OPENAI_API_KEY"
